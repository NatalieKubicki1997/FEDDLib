/* Put here all the code which is not really used anywhere but has been implemented such that
it would be a waste to just delete it because maybe someone finds a need for it
- Always write above the code, in which file you deleted it from and what it was used for
*/

//*******************************************************************************************//
/*
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
            ##############################################
            ##############################################                                               
            ##############################################
            ##############################################           
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
                      #######################
*/
//********************************************************************************************************
/*
In FE_def.hpp
void assemblyLaplaceVecFieldV2(int dim,
                                 std::string FEType,
                                 int degree,
                                 MatrixPtr_Type &A,
                                 bool callFillComplete = true);
*/
//this assembly used blas matrix-matrix multiplications. It determines the local stiffness matrix at once, but has some overhead due to zero off-diagonal blocks which are computed.
template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::assemblyLaplaceVecFieldV2(int dim,
                                                std::string FEType,
                                                int degree,
                                                MatrixPtr_Type &A,
                                                bool callFillComplete){

    TEUCHOS_TEST_FOR_EXCEPTION(FEType == "P0",std::logic_error, "Not implemented for P0");
    UN FEloc = checkFE(dim,FEType);

    ElementsPtr_Type elements = domainVec_.at(FEloc)->getElementsC();

    vec2D_dbl_ptr_Type pointsRep = domainVec_.at(FEloc)->getPointsRepeated();

    MapConstPtr_Type map = domainVec_.at(FEloc)->getMapRepeated();

    vec3D_dbl_ptr_Type 	dPhi;
    vec_dbl_ptr_Type weights = Teuchos::rcp(new vec_dbl_Type(0));

    UN deg = determineDegree(dim,FEType,FEType,Grad,Grad);

    getDPhi(dPhi, weights, dim, FEType, deg);

    Teuchos::BLAS<int, SC> teuchosBLAS;

    int nmbQuadPoints = dPhi->size();
    int nmbScalarDPhi = dPhi->at(0).size();
    int nmbAllDPhi = nmbScalarDPhi * dim;
    int nmbAllDPhiAllQaud = nmbQuadPoints * nmbAllDPhi;
    int sizeLocStiff = dim*dim;
    Teuchos::Array<SmallMatrix<double> > dPhiMat( nmbAllDPhiAllQaud, SmallMatrix<double>(dim) );
    this->buildFullDPhi( dPhi, dPhiMat ); //builds matrix from gradient of scalar phi


    SC detB;
    SC absDetB;
    SmallMatrix<SC> B(dim);
    SmallMatrix<SC> Binv(dim);
    GO glob_i, glob_j;
    vec_dbl_Type v_i(dim);
    vec_dbl_Type v_j(dim);

    for (UN T=0; T<elements->numberElements(); T++) {

        buildTransformation(elements->getElement(T).getVectorNodeList(), pointsRep, B);
        detB = B.computeInverse(Binv);
        absDetB = std::fabs(detB);

        Teuchos::Array<SmallMatrix<double> > allDPhiMatTrans( dPhiMat.size(), SmallMatrix<double>() );

        for (int i=0; i<allDPhiMatTrans.size(); i++) {
            SmallMatrix<double> res = dPhiMat[i] * Binv;
            allDPhiMatTrans[i] = res;
        }

        SmallMatrix<double> locStiffMat( nmbAllDPhi, 0. );

        for (int p=0; p<nmbQuadPoints; p++){

            double* allDPhiBlas = new double[ nmbAllDPhi * sizeLocStiff ];

            int offset = p * nmbAllDPhi;
            int offsetInArray = 0;
            for (int i=0; i<nmbAllDPhi; i++) {
                fillMatrixArray( allDPhiMatTrans[ offset + i ], allDPhiBlas, "rows",offsetInArray );
                offsetInArray += sizeLocStiff;
            }

            double* locStiffMatBlas = new double[ nmbAllDPhi * nmbAllDPhi ];

            teuchosBLAS.GEMM (Teuchos::TRANS, Teuchos::NO_TRANS, nmbAllDPhi, nmbAllDPhi, sizeLocStiff, 1., allDPhiBlas, sizeLocStiff/*lda of A not trans(A)! Otherwise result is wrong*/, allDPhiBlas, sizeLocStiff, 0., locStiffMatBlas, nmbAllDPhi);

            for (int i=0; i<nmbAllDPhi; i++) {
                for (int j=0; j<nmbAllDPhi; j++) {
                    locStiffMat[i][j] += weights->at(p) * locStiffMatBlas[ j * nmbAllDPhi + i ];
                }
            }

            delete [] allDPhiBlas;
            delete [] locStiffMatBlas;

        }

        for (UN i=0; i < nmbScalarDPhi; i++) {
            Teuchos::Array<SC> value( nmbAllDPhi, 0. );
            Teuchos::Array<GO> indices( nmbAllDPhi, 0 );
            for (UN d=0; d<dim; d++) {
                for (UN j=0; j < nmbScalarDPhi; j++){
                    value[ j * dim + d ] = absDetB * locStiffMat[dim * i + d][j];
                    indices[ j * dim + d ] = GO ( dim * map->getGlobalElement( elements->getElement(T).getNode(j) ) + d );
                }
                GO row = GO ( dim * map->getGlobalElement( elements->getElement(T).getNode(i) ) + d );
                A->insertGlobalValues( row, indices(), value() );
            }
        }
    }
    if (callFillComplete)
        A->fillComplete();
}

// THIS WAS IN HEADER OF FE_DECL.hpp
//Start of AceGen code
    /*! AceGen code for 3D Neo-Hooke material model
    @param[out] v: values needed for the computaion of F, not needed after computation
    @param[in] E: E module
    @param[in] nu: Poisson ratio
    @param[in] F: deformation gradient, basis functions
    @param[out] P: stresses
    @param[out] A: strains
    */
    void nh3d(double* v, double (*E), double (*Nu), double** F , double** Pmat, double**** Amat);

    /*! AceGen code for 3D Mooney-Rivlin material model
     @param[out] v: values needed for the computaion of F, not needed after computation
     @param[in] E: E module
     @param[in] nu: Poisson ratio
     @param[in] C: material constant
     @param[in] F: deformation gradient, basis functions
     @param[out] P: stresses
     @param[out] A: strains
     */
    void mr3d(double* v, double (*E), double (*Nu), double (*C), double** F, double** Pmat, double**** Amat);

    void stvk3d(double* v,double (*lam),double (*mue),double** F,double** Pmat,double**** Amat);

    void stvk2d(double* v, double (*lam),double (*mue),double** F ,double** Pmat,double**** Amat);
    
    void SMTSetElSpecBiot(ElementSpec *es,int *idata/*not needed*/,int ic,int ng, vec_dbl_Type& paraVec);
    
    void SMTSetElSpecBiotStVK(ElementSpec *es,int *idata/*not needed*/,int ic,int ng, vec_dbl_Type& paraVec);
    
    void SMTSetElSpecBiot3D(ElementSpec *es,int *idata/*not needed*/,int ic,int ng, vec_dbl_Type& paraVec);
    
    void SKR_Biot(double* v,ElementSpec *es,ElementData *ed, NodeSpec **ns, NodeData **nd,double *rdata,int *idata,double *p,double **s);
    
    void SKR_Biot_StVK(double* v,ElementSpec *es,ElementData *ed, NodeSpec **ns, NodeData **nd,double *rdata,int *idata,double *p,double **s);
    
    void SKR_Biot3D(double* v,ElementSpec *es,ElementData *ed, NodeSpec **ns, NodeData **nd,double *rdata,int *idata,double *p,double **s);
    
//End of AceGen code
/*
Now the implementation of the defined above functions:
The following thousand code lines were all inside FE_def.hpp and were generated
with AceGen as material models for solid problem
*/

/*************************************************************
 * AceGen    6.921 MacOSX (29 Jan 19)                         *
 *           Co. J. Korelc  2013           12 Feb 19 12:07:04 *
 **************************************************************
 User     : Full professional version
 Notebook : nh3d_C
 Evaluation time                 : 6 s     Mode  : Optimal
 Number of formulae              : 181     Method: Automatic
 Subroutine                      : nh3d size: 4928
 Total size of Mathematica  code : 4928 subexpressions
 Total size of C code            : 10178 bytes */
/******************* S U B R O U T I N E *********************/
template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::nh3d(double* v, double (*E), double (*Nu), double** F , double** Pmat, double**** Amat)
{
    v[356]=2e0*F[0][2];
    v[354]=2e0*F[0][1];
    v[323]=(*E)/(1e0+(*Nu));
    v[3]=((*Nu)*v[323])/(1e0-2e0*(*Nu));
    v[5]=v[323]/2e0;
    v[36]=v[5]/2e0;
    v[65]=2e0*F[0][1];
    v[86]=2e0*F[0][2];
    v[57]=2e0*F[1][0];
    v[66]=2e0*F[1][1];
    v[87]=2e0*F[1][2];
    v[58]=2e0*F[2][0];
    v[67]=2e0*F[2][1];
    v[18]=F[0][0]*F[0][1]+F[1][0]*F[1][1]+F[2][0]*F[2][1];
    v[335]=(v[18]*v[18]);
    v[88]=2e0*F[2][2];
    v[24]=F[0][1]*F[0][2]+F[1][1]*F[1][2]+F[2][1]*F[2][2];
    v[334]=(v[24]*v[24]);
    v[325]=v[18]*v[24];
    v[22]=F[0][0]*F[0][2]+F[1][0]*F[1][2]+F[2][0]*F[2][2];
    v[15]=Power(F[0][0],2)+Power(F[1][0],2)+Power(F[2][0],2);
    v[228]=-(F[2][1]*v[18]);
    v[225]=F[2][2]*v[18];
    v[217]=-(F[1][1]*v[18]);
    v[214]=F[1][2]*v[18];
    v[194]=-(F[2][0]*v[18]);
    v[185]=-(F[1][0]*v[18]);
    v[268]=F[2][1]*v[22];
    v[264]=-(F[2][2]*v[22]);
    v[255]=F[1][1]*v[22];
    v[251]=-(F[1][2]*v[22]);
    v[190]=-(F[2][0]*v[22]);
    v[181]=-(F[1][0]*v[22]);
    v[172]=-(F[0][0]*v[22]);
    v[20]=Power(F[0][1],2)+Power(F[1][1],2)+Power(F[2][1],2);
    v[324]=-(v[20]*v[22]);
    v[327]=2e0*(v[324]+v[325]);
    v[94]=v[20]*v[88];
    v[92]=v[20]*v[87];
    v[90]=v[20]*v[86];
    v[138]=v[15]*v[20]-v[335];
    v[270]=F[2][0]*v[24];
    v[260]=-(F[2][2]*v[24]);
    v[257]=F[1][0]*v[24];
    v[247]=-(F[1][2]*v[24]);
    v[244]=F[0][0]*v[24];
    v[232]=-(F[0][2]*v[24]);
    v[222]=-(F[2][1]*v[24]);
    v[211]=-(F[1][1]*v[24]);
    v[198]=-(F[0][1]*v[24]);
    v[168]=v[18]*v[22]-v[15]*v[24];
    v[331]=2e0*v[168];
    v[329]=2e0*v[168];
    v[326]=2e0*v[168];
    v[38]=-(v[22]*v[22]);
    v[26]=Power(F[0][2],2)+Power(F[1][2],2)+Power(F[2][2],2);
    v[333]=v[20]*v[26]-v[334];
    v[351]=2e0*F[0][0]*v[333];
    v[236]=v[22]*v[24]-v[18]*v[26];
    v[332]=2e0*v[236];
    v[330]=2e0*v[236];
    v[328]=2e0*v[236];
    v[99]=v[26]*v[58];
    v[97]=v[26]*v[57];
    v[93]=v[26]*v[67];
    v[91]=v[26]*v[66];
    v[89]=v[26]*v[65];
    v[148]=v[15]*v[26]+v[38];
    v[29]=v[148]*v[20]+2e0*v[22]*v[325]-v[15]*v[334]-v[26]*v[335];
    v[336]=1e0/Power(v[29],2);
    v[32]=-v[5]+v[3]*log(sqrt(v[29]));
    v[337]=(v[3]/4e0-v[32]/2e0)*v[336];
    v[137]=v[337]*(F[2][1]*v[326]+F[2][0]*v[327]-v[335]*v[88]+v[15]*v[94]);
    v[147]=v[137]*v[138];
    v[136]=v[337]*(F[2][2]*v[329]+F[2][0]*v[330]+v[38]*v[67]+v[15]*v[93]);
    v[156]=v[136]*v[148];
    v[135]=v[337]*(F[2][2]*v[327]+F[2][1]*v[328]-v[334]*v[58]+v[20]*v[99]);
    v[165]=v[135]*v[333];
    v[134]=v[337]*(F[1][1]*v[326]+F[1][0]*v[327]-v[335]*v[87]+v[15]*v[92]);
    v[144]=v[134]*v[138];
    v[133]=v[337]*(F[1][2]*v[331]+F[1][0]*v[332]+v[38]*v[66]+v[15]*v[91]);
    v[153]=v[133]*v[148];
    v[132]=v[337]*(F[1][2]*v[327]+F[1][1]*v[328]-v[334]*v[57]+v[20]*v[97]);
    v[162]=v[132]*v[333];
    v[131]=v[337]*(F[0][0]*v[327]+F[0][1]*v[329]-v[335]*v[86]+v[15]*v[90]);
    v[130]=v[337]*(F[0][2]*v[331]+F[0][0]*v[332]+v[38]*v[65]+v[15]*v[89]);
    v[128]=v[337]*(F[0][2]*v[327]+F[0][1]*v[330]+v[351]);
    v[37]=v[32]/(2e0*v[29]);
    v[355]=v[37]*(2e0*v[172]+v[15]*v[86]);
    v[353]=v[37]*(2e0*v[232]+v[89]);
    v[352]=v[37]*(2e0*v[198]+v[90]);
    v[349]=-2e0*(F[1][0]*v[20]+v[217])*v[37];
    v[348]=-(v[37]*(2e0*v[185]+v[15]*v[66]));
    v[347]=-2e0*(F[2][0]*v[20]+v[228])*v[37];
    v[346]=-(v[37]*(2e0*v[194]+v[15]*v[67]));
    v[345]=-(v[37]*(2e0*v[251]+v[97]));
    v[344]=-(v[37]*(2e0*v[181]+v[15]*v[87]));
    v[343]=-(v[37]*(2e0*v[264]+v[99]));
    v[342]=-(v[37]*(2e0*v[190]+v[15]*v[88]));
    v[341]=-(v[37]*(2e0*v[247]+v[91]));
    v[340]=-(v[37]*(2e0*v[211]+v[92]));
    v[339]=-(v[37]*(2e0*v[260]+v[93]));
    v[338]=-(v[37]*(2e0*v[222]+v[94]));
    v[272]=v[137]*v[328]+v[37]*(2e0*v[268]+2e0*v[270]-2e0*v[18]*v[88]);
    v[267]=v[136]*v[328]+v[343];
    v[263]=v[135]*v[328]+v[339];
    v[259]=v[134]*v[328]+v[37]*(2e0*v[255]+2e0*v[257]-2e0*v[18]*v[87]);
    v[254]=v[133]*v[328]+v[345];
    v[250]=v[132]*v[328]+v[341];
    v[246]=v[131]*v[328]+v[37]*(2e0*F[0][1]*v[22]+2e0*v[244]-2e0*v[18]*v[86]);
    v[241]=v[130]*v[328]+2e0*(F[0][2]*v[22]-F[0][0]*v[26])*v[37];
    v[231]=v[137]*v[327]+v[347];
    v[227]=v[136]*v[327]+v[37]*(2e0*v[225]+2e0*v[270]-2e0*v[22]*v[67]);
    v[224]=v[135]*v[327]+v[338];
    v[301]=2e0*F[1][0]*v[165]+F[1][2]*v[224]+F[1][1]*v[263];
    v[279]=2e0*F[0][0]*v[165]+F[0][2]*v[224]+F[0][1]*v[263];
    v[220]=v[134]*v[327]+v[349];
    v[216]=v[133]*v[327]+v[37]*(2e0*v[214]+2e0*v[257]-2e0*v[22]*v[66]);
    v[213]=v[132]*v[327]+v[340];
    v[276]=2e0*F[0][0]*v[162]+F[0][2]*v[213]+F[0][1]*v[250];
    v[209]=v[131]*v[327]+2e0*(F[0][1]*v[18]-F[0][0]*v[20])*v[37];
    v[196]=v[137]*v[326]+v[346];
    v[314]=2e0*F[1][2]*v[147]+F[1][1]*v[196]+F[1][0]*v[231];
    v[296]=2e0*F[0][2]*v[147]+F[0][1]*v[196]+F[0][0]*v[231];
    v[192]=v[136]*v[326]+v[342];
    v[308]=2e0*F[1][1]*v[156]+F[1][2]*v[192]+F[1][0]*v[267];
    v[288]=2e0*F[0][1]*v[156]+F[0][2]*v[192]+F[0][0]*v[267];
    v[188]=v[135]*v[326]+v[37]*(2e0*v[225]+2e0*v[268]-2e0*v[24]*v[58]);
    v[187]=v[134]*v[326]+v[348];
    v[293]=2e0*F[0][2]*v[144]+F[0][1]*v[187]+F[0][0]*v[220];
    v[183]=v[133]*v[326]+v[344];
    v[285]=2e0*F[0][1]*v[153]+F[0][2]*v[183]+F[0][0]*v[254];
    v[179]=v[132]*v[326]+v[37]*(2e0*v[214]+2e0*v[255]-2e0*v[24]*v[57]);
    v[178]=v[131]*v[326]+2e0*(-(F[0][1]*v[15])+F[0][0]*v[18])*v[37];
    v[167]=v[137]*v[333]-v[338];
    v[303]=2e0*F[1][0]*v[167]+F[1][2]*v[231]+F[1][1]*v[272];
    v[281]=2e0*F[0][0]*v[167]+F[0][2]*v[231]+F[0][1]*v[272];
    v[166]=v[136]*v[333]-v[339];
    v[302]=2e0*F[1][0]*v[166]+F[1][2]*v[227]+F[1][1]*v[267];
    v[280]=2e0*F[0][0]*v[166]+F[0][2]*v[227]+F[0][1]*v[267];
    v[164]=v[134]*v[333]-v[340];
    v[278]=2e0*F[0][0]*v[164]+F[0][2]*v[220]+F[0][1]*v[259];
    v[163]=v[133]*v[333]-v[341];
    v[277]=2e0*F[0][0]*v[163]+F[0][2]*v[216]+F[0][1]*v[254];
    v[157]=v[137]*v[148]-v[342];
    v[309]=2e0*F[1][1]*v[157]+F[1][2]*v[196]+F[1][0]*v[272];
    v[289]=2e0*F[0][1]*v[157]+F[0][2]*v[196]+F[0][0]*v[272];
    v[155]=v[135]*v[148]-v[343];
    v[307]=2e0*F[1][1]*v[155]+F[1][2]*v[188]+F[1][0]*v[263];
    v[287]=2e0*F[0][1]*v[155]+F[0][2]*v[188]+F[0][0]*v[263];
    v[154]=v[134]*v[148]-v[344];
    v[286]=2e0*F[0][1]*v[154]+F[0][2]*v[187]+F[0][0]*v[259];
    v[284]=F[0][2]*v[179]+F[0][0]*v[250]+2e0*F[0][1]*(v[132]*v[148]-v[345]);
    v[146]=v[136]*v[138]-v[346];
    v[313]=2e0*F[1][2]*v[146]+F[1][1]*v[192]+F[1][0]*v[227];
    v[295]=2e0*F[0][2]*v[146]+F[0][1]*v[192]+F[0][0]*v[227];
    v[145]=v[135]*v[138]-v[347];
    v[312]=2e0*F[1][2]*v[145]+F[1][1]*v[188]+F[1][0]*v[224];
    v[294]=2e0*F[0][2]*v[145]+F[0][1]*v[188]+F[0][0]*v[224];
    v[292]=F[0][1]*v[183]+F[0][0]*v[216]+2e0*F[0][2]*(v[133]*v[138]-v[348]);
    v[291]=F[0][1]*v[179]+F[0][0]*v[213]+(v[132]*v[138]-v[349])*v[356];
    v[35]=v[36]+v[138]*v[37];
    v[310]=2e0*v[35];
    v[40]=v[36]+v[148]*v[37];
    v[304]=2e0*v[40];
    v[43]=v[36]+v[333]*v[37];
    v[297]=2e0*v[43];
    v[44]=v[326]*v[37];
    v[319]=2e0*F[2][1]*v[157]+F[2][2]*v[196]+F[2][0]*v[272]+v[44];
    v[306]=2e0*F[1][1]*v[154]+F[1][2]*v[187]+F[1][0]*v[259]+v[44];
    v[283]=F[0][2]*v[178]+F[0][0]*v[246]+v[354]*(v[131]*v[148]+v[355])+v[44];
    v[45]=v[327]*v[37];
    v[317]=2e0*F[2][0]*v[167]+F[2][2]*v[231]+F[2][1]*v[272]+v[45];
    v[300]=2e0*F[1][0]*v[164]+F[1][2]*v[220]+F[1][1]*v[259]+v[45];
    v[275]=F[0][2]*v[209]+F[0][1]*v[246]+2e0*F[0][0]*(v[131]*v[333]+v[352])+v[45];
    v[46]=v[328]*v[37];
    v[316]=2e0*F[2][0]*v[166]+F[2][2]*v[227]+F[2][1]*v[267]+v[46];
    v[299]=2e0*F[1][0]*v[163]+F[1][2]*v[216]+F[1][1]*v[254]+v[46];
    v[274]=F[0][1]*v[241]+2e0*F[0][0]*(v[130]*v[333]+v[353])+v[46]+F[0][2]*(v[130]*v[327]+v[37]*
                                                                            (2e0*F[0][2]*v[18]+2e0*v[244]-2e0*v[22]*v[65]));
    Pmat[0][0]=F[0][0]*v[297]+F[0][2]*v[45]+F[0][1]*v[46];
    Pmat[0][1]=F[0][1]*v[304]+F[0][2]*v[44]+F[0][0]*v[46];
    Pmat[0][2]=F[0][2]*v[310]+F[0][1]*v[44]+F[0][0]*v[45];
    Pmat[1][0]=2e0*F[1][0]*v[43]+F[1][2]*v[45]+F[1][1]*v[46];
    Pmat[1][1]=2e0*F[1][1]*v[40]+F[1][2]*v[44]+F[1][0]*v[46];
    Pmat[1][2]=2e0*F[1][2]*v[35]+F[1][1]*v[44]+F[1][0]*v[45];
    Pmat[2][0]=F[2][0]*v[297]+F[2][2]*v[45]+F[2][1]*v[46];
    Pmat[2][1]=F[2][1]*v[304]+F[2][2]*v[44]+F[2][0]*v[46];
    Pmat[2][2]=F[2][2]*v[310]+F[2][1]*v[44]+F[2][0]*v[45];
    Amat[0][0][0][0]=v[297]+v[128]*v[351]+F[0][2]*(v[128]*v[327]-v[352])+F[0][1]*(v[128]*v[328]-v[353]
                                                                                  );
    Amat[0][0][0][1]=v[274];
    Amat[0][0][0][2]=v[275];
    Amat[0][0][1][0]=v[276];
    Amat[0][0][1][1]=v[277];
    Amat[0][0][1][2]=v[278];
    Amat[0][0][2][0]=v[279];
    Amat[0][0][2][1]=v[280];
    Amat[0][0][2][2]=v[281];
    Amat[0][1][0][0]=v[274];
    Amat[0][1][0][1]=F[0][0]*v[241]+v[304]+v[130]*v[148]*v[354]+F[0][2]*(v[130]*v[326]-v[355]);
    Amat[0][1][0][2]=v[283];
    Amat[0][1][1][0]=v[284];
    Amat[0][1][1][1]=v[285];
    Amat[0][1][1][2]=v[286];
    Amat[0][1][2][0]=v[287];
    Amat[0][1][2][1]=v[288];
    Amat[0][1][2][2]=v[289];
    Amat[0][2][0][0]=v[275];
    Amat[0][2][0][1]=v[283];
    Amat[0][2][0][2]=F[0][1]*v[178]+F[0][0]*v[209]+v[310]+v[131]*v[138]*v[356];
    Amat[0][2][1][0]=v[291];
    Amat[0][2][1][1]=v[292];
    Amat[0][2][1][2]=v[293];
    Amat[0][2][2][0]=v[294];
    Amat[0][2][2][1]=v[295];
    Amat[0][2][2][2]=v[296];
    Amat[1][0][0][0]=v[276];
    Amat[1][0][0][1]=v[284];
    Amat[1][0][0][2]=v[291];
    Amat[1][0][1][0]=2e0*F[1][0]*v[162]+F[1][2]*v[213]+F[1][1]*v[250]+v[297];
    Amat[1][0][1][1]=v[299];
    Amat[1][0][1][2]=v[300];
    Amat[1][0][2][0]=v[301];
    Amat[1][0][2][1]=v[302];
    Amat[1][0][2][2]=v[303];
    Amat[1][1][0][0]=v[277];
    Amat[1][1][0][1]=v[285];
    Amat[1][1][0][2]=v[292];
    Amat[1][1][1][0]=v[299];
    Amat[1][1][1][1]=2e0*F[1][1]*v[153]+F[1][2]*v[183]+F[1][0]*v[254]+v[304];
    Amat[1][1][1][2]=v[306];
    Amat[1][1][2][0]=v[307];
    Amat[1][1][2][1]=v[308];
    Amat[1][1][2][2]=v[309];
    Amat[1][2][0][0]=v[278];
    Amat[1][2][0][1]=v[286];
    Amat[1][2][0][2]=v[293];
    Amat[1][2][1][0]=v[300];
    Amat[1][2][1][1]=v[306];
    Amat[1][2][1][2]=2e0*F[1][2]*v[144]+F[1][1]*v[187]+F[1][0]*v[220]+v[310];
    Amat[1][2][2][0]=v[312];
    Amat[1][2][2][1]=v[313];
    Amat[1][2][2][2]=v[314];
    Amat[2][0][0][0]=v[279];
    Amat[2][0][0][1]=v[287];
    Amat[2][0][0][2]=v[294];
    Amat[2][0][1][0]=v[301];
    Amat[2][0][1][1]=v[307];
    Amat[2][0][1][2]=v[312];
    Amat[2][0][2][0]=2e0*F[2][0]*v[165]+F[2][2]*v[224]+F[2][1]*v[263]+v[297];
    Amat[2][0][2][1]=v[316];
    Amat[2][0][2][2]=v[317];
    Amat[2][1][0][0]=v[280];
    Amat[2][1][0][1]=v[288];
    Amat[2][1][0][2]=v[295];
    Amat[2][1][1][0]=v[302];
    Amat[2][1][1][1]=v[308];
    Amat[2][1][1][2]=v[313];
    Amat[2][1][2][0]=v[316];
    Amat[2][1][2][1]=2e0*F[2][1]*v[156]+F[2][2]*v[192]+F[2][0]*v[267]+v[304];
    Amat[2][1][2][2]=v[319];
    Amat[2][2][0][0]=v[281];
    Amat[2][2][0][1]=v[289];
    Amat[2][2][0][2]=v[296];
    Amat[2][2][1][0]=v[303];
    Amat[2][2][1][1]=v[309];
    Amat[2][2][1][2]=v[314];
    Amat[2][2][2][0]=v[317];
    Amat[2][2][2][1]=v[319];
    Amat[2][2][2][2]=2e0*F[2][2]*v[147]+F[2][1]*v[196]+F[2][0]*v[231]+v[310];
}


/*************************************************************
 * AceGen    6.921 MacOSX (29 Jan 19)                         *
 *           Co. J. Korelc  2013           12 Feb 19 12:06:46 *
 **************************************************************
 User     : Full professional version
 Notebook : mr3d_C
 Evaluation time                 : 7 s     Mode  : Optimal
 Number of formulae              : 190     Method: Automatic
 Subroutine                      : mr3d size: 5215
 Total size of Mathematica  code : 5215 subexpressions
 Total size of C code            : 10798 bytes */

/******************* S U B R O U T I N E *********************/
template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::mr3d(double* v,double (*E),double (*Nu),double (*C)
          ,double** F,double** Pmat,double**** Amat)
{
    v[366]=2e0*F[0][2];
    v[364]=2e0*F[0][1];
    v[4]=(*E)/(2e0+2e0*(*Nu));
    v[139]=((*C)*v[4])/2e0;
    v[5]=(*E)/(3e0-6e0*(*Nu));
    v[57]=2e0*F[0][0];
    v[150]=v[139]*v[57];
    v[66]=2e0*F[0][1];
    v[165]=v[139]*v[66];
    v[87]=2e0*F[0][2];
    v[167]=v[139]*v[87];
    v[58]=2e0*F[1][0];
    v[155]=v[139]*v[58];
    v[67]=2e0*F[1][1];
    v[170]=v[139]*v[67];
    v[88]=2e0*F[1][2];
    v[172]=v[139]*v[88];
    v[59]=2e0*F[2][0];
    v[159]=v[139]*v[59];
    v[68]=2e0*F[2][1];
    v[175]=v[139]*v[68];
    v[18]=F[0][0]*F[0][1]+F[1][0]*F[1][1]+F[2][0]*F[2][1];
    v[345]=(v[18]*v[18]);
    v[89]=2e0*F[2][2];
    v[177]=v[139]*v[89];
    v[24]=F[0][1]*F[0][2]+F[1][1]*F[1][2]+F[2][1]*F[2][2];
    v[344]=(v[24]*v[24]);
    v[335]=v[18]*v[24];
    v[22]=F[0][0]*F[0][2]+F[1][0]*F[1][2]+F[2][0]*F[2][2];
    v[15]=Power(F[0][0],2)+Power(F[1][0],2)+Power(F[2][0],2);
    v[239]=-(F[2][1]*v[18]);
    v[236]=F[2][2]*v[18];
    v[228]=-(F[1][1]*v[18]);
    v[225]=F[1][2]*v[18];
    v[205]=-(F[2][0]*v[18]);
    v[196]=-(F[1][0]*v[18]);
    v[279]=F[2][1]*v[22];
    v[275]=-(F[2][2]*v[22]);
    v[266]=F[1][1]*v[22];
    v[262]=-(F[1][2]*v[22]);
    v[201]=-(F[2][0]*v[22]);
    v[192]=-(F[1][0]*v[22]);
    v[183]=-(F[0][0]*v[22]);
    v[20]=Power(F[0][1],2)+Power(F[1][1],2)+Power(F[2][1],2);
    v[334]=-(v[20]*v[22]);
    v[337]=2e0*(v[334]+v[335]);
    v[95]=v[20]*v[89];
    v[93]=v[20]*v[88];
    v[91]=v[20]*v[87];
    v[140]=v[15]*v[20]-v[345];
    v[281]=F[2][0]*v[24];
    v[271]=-(F[2][2]*v[24]);
    v[268]=F[1][0]*v[24];
    v[258]=-(F[1][2]*v[24]);
    v[255]=F[0][0]*v[24];
    v[243]=-(F[0][2]*v[24]);
    v[233]=-(F[2][1]*v[24]);
    v[222]=-(F[1][1]*v[24]);
    v[209]=-(F[0][1]*v[24]);
    v[179]=v[18]*v[22]-v[15]*v[24];
    v[341]=2e0*v[179];
    v[339]=2e0*v[179];
    v[336]=2e0*v[179];
    v[38]=-(v[22]*v[22]);
    v[26]=Power(F[0][2],2)+Power(F[1][2],2)+Power(F[2][2],2);
    v[343]=v[20]*v[26]-v[344];
    v[361]=v[343]*v[57];
    v[247]=v[22]*v[24]-v[18]*v[26];
    v[342]=2e0*v[247];
    v[340]=2e0*v[247];
    v[338]=2e0*v[247];
    v[100]=v[26]*v[59];
    v[98]=v[26]*v[58];
    v[94]=v[26]*v[68];
    v[92]=v[26]*v[67];
    v[90]=v[26]*v[66];
    v[151]=v[15]*v[26]+v[38];
    v[29]=v[151]*v[20]+2e0*v[22]*v[335]-v[15]*v[344]-v[26]*v[345];
    v[346]=1e0/Power(v[29],2);
    v[33]=-2e0*v[139]-v[4]+v[5]*log(sqrt(v[29]));
    v[347]=v[346]*(-v[33]/2e0+v[5]/4e0);
    v[138]=v[347]*(F[2][1]*v[336]+F[2][0]*v[337]-v[345]*v[89]+v[15]*v[95]);
    v[149]=v[138]*v[140];
    v[137]=v[347]*(F[2][2]*v[339]+F[2][0]*v[340]+v[38]*v[68]+v[15]*v[94]);
    v[161]=v[137]*v[151];
    v[136]=v[347]*(v[100]*v[20]+F[2][2]*v[337]+F[2][1]*v[338]-v[344]*v[59]);
    v[174]=v[136]*v[343];
    v[135]=v[347]*(F[1][1]*v[336]+F[1][0]*v[337]-v[345]*v[88]+v[15]*v[93]);
    v[146]=v[135]*v[140];
    v[134]=v[347]*(F[1][2]*v[341]+F[1][0]*v[342]+v[38]*v[67]+v[15]*v[92]);
    v[157]=v[134]*v[151];
    v[133]=v[347]*(F[1][2]*v[337]+F[1][1]*v[338]-v[344]*v[58]+v[20]*v[98]);
    v[169]=v[133]*v[343];
    v[132]=v[347]*(F[0][0]*v[337]+F[0][1]*v[339]-v[345]*v[87]+v[15]*v[91]);
    v[131]=v[347]*(F[0][2]*v[341]+F[0][0]*v[342]+v[38]*v[66]+v[15]*v[90]);
    v[129]=v[347]*(F[0][2]*v[337]+F[0][1]*v[340]+v[361]);
    v[37]=v[33]/(2e0*v[29]);
    v[365]=v[37]*(2e0*v[183]+v[15]*v[87]);
    v[363]=v[37]*(2e0*v[243]+v[90]);
    v[362]=v[37]*(2e0*v[209]+v[91]);
    v[359]=-2e0*(F[1][0]*v[20]+v[228])*v[37];
    v[358]=-(v[37]*(2e0*v[196]+v[15]*v[67]));
    v[357]=-2e0*(F[2][0]*v[20]+v[239])*v[37];
    v[356]=-(v[37]*(2e0*v[205]+v[15]*v[68]));
    v[355]=-(v[37]*(2e0*v[262]+v[98]));
    v[354]=-(v[37]*(2e0*v[192]+v[15]*v[88]));
    v[353]=-((v[100]+2e0*v[275])*v[37]);
    v[352]=-(v[37]*(2e0*v[201]+v[15]*v[89]));
    v[351]=-(v[37]*(2e0*v[258]+v[92]));
    v[350]=-(v[37]*(2e0*v[222]+v[93]));
    v[349]=-(v[37]*(2e0*v[271]+v[94]));
    v[348]=-(v[37]*(2e0*v[233]+v[95]));
    v[283]=v[138]*v[338]+v[37]*(2e0*v[279]+2e0*v[281]-2e0*v[18]*v[89]);
    v[278]=-v[159]+v[137]*v[338]+v[353];
    v[274]=-v[175]+v[136]*v[338]+v[349];
    v[270]=v[135]*v[338]+v[37]*(2e0*v[266]+2e0*v[268]-2e0*v[18]*v[88]);
    v[265]=-v[155]+v[134]*v[338]+v[355];
    v[261]=-v[170]+v[133]*v[338]+v[351];
    v[257]=v[132]*v[338]+v[37]*(2e0*F[0][1]*v[22]+2e0*v[255]-2e0*v[18]*v[87]);
    v[252]=-v[150]+v[131]*v[338]+2e0*(F[0][2]*v[22]-F[0][0]*v[26])*v[37];
    v[242]=-v[159]+v[138]*v[337]+v[357];
    v[238]=v[137]*v[337]+v[37]*(2e0*v[236]+2e0*v[281]-2e0*v[22]*v[68]);
    v[235]=-v[177]+v[136]*v[337]+v[348];
    v[312]=2e0*F[1][0]*v[174]+F[1][2]*v[235]+F[1][1]*v[274];
    v[290]=2e0*F[0][0]*v[174]+F[0][2]*v[235]+F[0][1]*v[274];
    v[231]=-v[155]+v[135]*v[337]+v[359];
    v[227]=v[134]*v[337]+v[37]*(2e0*v[225]+2e0*v[268]-2e0*v[22]*v[67]);
    v[224]=-v[172]+v[133]*v[337]+v[350];
    v[287]=2e0*F[0][0]*v[169]+F[0][2]*v[224]+F[0][1]*v[261];
    v[220]=-v[150]+v[132]*v[337]+2e0*(F[0][1]*v[18]-F[0][0]*v[20])*v[37];
    v[207]=-v[175]+v[138]*v[336]+v[356];
    v[325]=2e0*F[1][2]*v[149]+F[1][1]*v[207]+F[1][0]*v[242];
    v[307]=2e0*F[0][2]*v[149]+F[0][1]*v[207]+F[0][0]*v[242];
    v[203]=-v[177]+v[137]*v[336]+v[352];
    v[319]=2e0*F[1][1]*v[161]+F[1][2]*v[203]+F[1][0]*v[278];
    v[299]=2e0*F[0][1]*v[161]+F[0][2]*v[203]+F[0][0]*v[278];
    v[199]=v[136]*v[336]+v[37]*(2e0*v[236]+2e0*v[279]-2e0*v[24]*v[59]);
    v[198]=-v[170]+v[135]*v[336]+v[358];
    v[304]=2e0*F[0][2]*v[146]+F[0][1]*v[198]+F[0][0]*v[231];
    v[194]=-v[172]+v[134]*v[336]+v[354];
    v[296]=2e0*F[0][1]*v[157]+F[0][2]*v[194]+F[0][0]*v[265];
    v[190]=v[133]*v[336]+v[37]*(2e0*v[225]+2e0*v[266]-2e0*v[24]*v[58]);
    v[189]=-v[165]+v[132]*v[336]+2e0*(-(F[0][1]*v[15])+F[0][0]*v[18])*v[37];
    v[178]=v[177]+v[138]*v[343]-v[348];
    v[314]=2e0*F[1][0]*v[178]+F[1][2]*v[242]+F[1][1]*v[283];
    v[292]=2e0*F[0][0]*v[178]+F[0][2]*v[242]+F[0][1]*v[283];
    v[176]=v[175]+v[137]*v[343]-v[349];
    v[313]=2e0*F[1][0]*v[176]+F[1][2]*v[238]+F[1][1]*v[278];
    v[291]=2e0*F[0][0]*v[176]+F[0][2]*v[238]+F[0][1]*v[278];
    v[173]=v[172]+v[135]*v[343]-v[350];
    v[289]=2e0*F[0][0]*v[173]+F[0][2]*v[231]+F[0][1]*v[270];
    v[171]=v[170]+v[134]*v[343]-v[351];
    v[288]=2e0*F[0][0]*v[171]+F[0][2]*v[227]+F[0][1]*v[265];
    v[162]=v[138]*v[151]+v[177]-v[352];
    v[320]=2e0*F[1][1]*v[162]+F[1][2]*v[207]+F[1][0]*v[283];
    v[300]=2e0*F[0][1]*v[162]+F[0][2]*v[207]+F[0][0]*v[283];
    v[160]=v[136]*v[151]+v[159]-v[353];
    v[318]=2e0*F[1][1]*v[160]+F[1][2]*v[199]+F[1][0]*v[274];
    v[298]=2e0*F[0][1]*v[160]+F[0][2]*v[199]+F[0][0]*v[274];
    v[158]=v[135]*v[151]+v[172]-v[354];
    v[297]=2e0*F[0][1]*v[158]+F[0][2]*v[198]+F[0][0]*v[270];
    v[295]=F[0][2]*v[190]+F[0][0]*v[261]+2e0*F[0][1]*(v[133]*v[151]+v[155]-v[355]);
    v[148]=v[137]*v[140]+v[175]-v[356];
    v[324]=2e0*F[1][2]*v[148]+F[1][1]*v[203]+F[1][0]*v[238];
    v[306]=2e0*F[0][2]*v[148]+F[0][1]*v[203]+F[0][0]*v[238];
    v[147]=v[136]*v[140]+v[159]-v[357];
    v[323]=2e0*F[1][2]*v[147]+F[1][1]*v[199]+F[1][0]*v[235];
    v[305]=2e0*F[0][2]*v[147]+F[0][1]*v[199]+F[0][0]*v[235];
    v[303]=F[0][1]*v[194]+F[0][0]*v[227]+2e0*F[0][2]*(v[134]*v[140]+v[170]-v[358]);
    v[302]=F[0][1]*v[190]+F[0][0]*v[224]+(v[133]*v[140]+v[155]-v[359])*v[366];
    v[36]=v[140]*v[37]+((1e0+(*C)*(-1e0+v[15]+v[20]))*v[4])/2e0;
    v[321]=2e0*v[36];
    v[40]=v[151]*v[37]+((1e0+(*C)*(-1e0+v[15]+v[26]))*v[4])/2e0;
    v[315]=2e0*v[40];
    v[43]=v[343]*v[37]+((1e0+(*C)*(-1e0+v[20]+v[26]))*v[4])/2e0;
    v[308]=2e0*v[43];
    v[45]=-2e0*v[139]*v[24]+v[336]*v[37];
    v[330]=2e0*F[2][1]*v[162]+F[2][2]*v[207]+F[2][0]*v[283]+v[45];
    v[317]=2e0*F[1][1]*v[158]+F[1][2]*v[198]+F[1][0]*v[270]+v[45];
    v[294]=F[0][2]*v[189]+F[0][0]*v[257]+v[364]*(v[132]*v[151]+v[167]+v[365])+v[45];
    v[46]=-2e0*v[139]*v[22]+v[337]*v[37];
    v[328]=2e0*F[2][0]*v[178]+F[2][2]*v[242]+F[2][1]*v[283]+v[46];
    v[311]=2e0*F[1][0]*v[173]+F[1][2]*v[231]+F[1][1]*v[270]+v[46];
    v[286]=F[0][2]*v[220]+F[0][1]*v[257]+2e0*F[0][0]*(v[167]+v[132]*v[343]+v[362])+v[46];
    v[47]=-2e0*v[139]*v[18]+v[338]*v[37];
    v[327]=2e0*F[2][0]*v[176]+F[2][2]*v[238]+F[2][1]*v[278]+v[47];
    v[310]=2e0*F[1][0]*v[171]+F[1][2]*v[227]+F[1][1]*v[265]+v[47];
    v[285]=F[0][1]*v[252]+2e0*F[0][0]*(v[165]+v[131]*v[343]+v[363])+v[47]+F[0][2]*(v[131]*v[337]+v[37]*
                                                                                   (2e0*F[0][2]*v[18]+2e0*v[255]-2e0*v[22]*v[66]));
    Pmat[0][0]=F[0][0]*v[308]+F[0][2]*v[46]+F[0][1]*v[47];
    Pmat[0][1]=F[0][1]*v[315]+F[0][2]*v[45]+F[0][0]*v[47];
    Pmat[0][2]=F[0][2]*v[321]+F[0][1]*v[45]+F[0][0]*v[46];
    Pmat[1][0]=2e0*F[1][0]*v[43]+F[1][2]*v[46]+F[1][1]*v[47];
    Pmat[1][1]=2e0*F[1][1]*v[40]+F[1][2]*v[45]+F[1][0]*v[47];
    Pmat[1][2]=2e0*F[1][2]*v[36]+F[1][1]*v[45]+F[1][0]*v[46];
    Pmat[2][0]=F[2][0]*v[308]+F[2][2]*v[46]+F[2][1]*v[47];
    Pmat[2][1]=F[2][1]*v[315]+F[2][2]*v[45]+F[2][0]*v[47];
    Pmat[2][2]=F[2][2]*v[321]+F[2][1]*v[45]+F[2][0]*v[46];
    Amat[0][0][0][0]=v[308]+v[129]*v[361]+F[0][2]*(-v[167]+v[129]*v[337]-v[362])+F[0][1]*(-v[165]
                                                                                          +v[129]*v[338]-v[363]);
    Amat[0][0][0][1]=v[285];
    Amat[0][0][0][2]=v[286];
    Amat[0][0][1][0]=v[287];
    Amat[0][0][1][1]=v[288];
    Amat[0][0][1][2]=v[289];
    Amat[0][0][2][0]=v[290];
    Amat[0][0][2][1]=v[291];
    Amat[0][0][2][2]=v[292];
    Amat[0][1][0][0]=v[285];
    Amat[0][1][0][1]=F[0][0]*v[252]+v[315]+v[131]*v[151]*v[364]+F[0][2]*(-v[167]+v[131]*v[336]-v[365]);
    Amat[0][1][0][2]=v[294];
    Amat[0][1][1][0]=v[295];
    Amat[0][1][1][1]=v[296];
    Amat[0][1][1][2]=v[297];
    Amat[0][1][2][0]=v[298];
    Amat[0][1][2][1]=v[299];
    Amat[0][1][2][2]=v[300];
    Amat[0][2][0][0]=v[286];
    Amat[0][2][0][1]=v[294];
    Amat[0][2][0][2]=F[0][1]*v[189]+F[0][0]*v[220]+v[321]+v[132]*v[140]*v[366];
    Amat[0][2][1][0]=v[302];
    Amat[0][2][1][1]=v[303];
    Amat[0][2][1][2]=v[304];
    Amat[0][2][2][0]=v[305];
    Amat[0][2][2][1]=v[306];
    Amat[0][2][2][2]=v[307];
    Amat[1][0][0][0]=v[287];
    Amat[1][0][0][1]=v[295];
    Amat[1][0][0][2]=v[302];
    Amat[1][0][1][0]=2e0*F[1][0]*v[169]+F[1][2]*v[224]+F[1][1]*v[261]+v[308];
    Amat[1][0][1][1]=v[310];
    Amat[1][0][1][2]=v[311];
    Amat[1][0][2][0]=v[312];
    Amat[1][0][2][1]=v[313];
    Amat[1][0][2][2]=v[314];
    Amat[1][1][0][0]=v[288];
    Amat[1][1][0][1]=v[296];
    Amat[1][1][0][2]=v[303];
    Amat[1][1][1][0]=v[310];
    Amat[1][1][1][1]=2e0*F[1][1]*v[157]+F[1][2]*v[194]+F[1][0]*v[265]+v[315];
    Amat[1][1][1][2]=v[317];
    Amat[1][1][2][0]=v[318];
    Amat[1][1][2][1]=v[319];
    Amat[1][1][2][2]=v[320];
    Amat[1][2][0][0]=v[289];
    Amat[1][2][0][1]=v[297];
    Amat[1][2][0][2]=v[304];
    Amat[1][2][1][0]=v[311];
    Amat[1][2][1][1]=v[317];
    Amat[1][2][1][2]=2e0*F[1][2]*v[146]+F[1][1]*v[198]+F[1][0]*v[231]+v[321];
    Amat[1][2][2][0]=v[323];
    Amat[1][2][2][1]=v[324];
    Amat[1][2][2][2]=v[325];
    Amat[2][0][0][0]=v[290];
    Amat[2][0][0][1]=v[298];
    Amat[2][0][0][2]=v[305];
    Amat[2][0][1][0]=v[312];
    Amat[2][0][1][1]=v[318];
    Amat[2][0][1][2]=v[323];
    Amat[2][0][2][0]=2e0*F[2][0]*v[174]+F[2][2]*v[235]+F[2][1]*v[274]+v[308];
    Amat[2][0][2][1]=v[327];
    Amat[2][0][2][2]=v[328];
    Amat[2][1][0][0]=v[291];
    Amat[2][1][0][1]=v[299];
    Amat[2][1][0][2]=v[306];
    Amat[2][1][1][0]=v[313];
    Amat[2][1][1][1]=v[319];
    Amat[2][1][1][2]=v[324];
    Amat[2][1][2][0]=v[327];
    Amat[2][1][2][1]=2e0*F[2][1]*v[161]+F[2][2]*v[203]+F[2][0]*v[278]+v[315];
    Amat[2][1][2][2]=v[330];
    Amat[2][2][0][0]=v[292];
    Amat[2][2][0][1]=v[300];
    Amat[2][2][0][2]=v[307];
    Amat[2][2][1][0]=v[314];
    Amat[2][2][1][1]=v[320];
    Amat[2][2][1][2]=v[325];
    Amat[2][2][2][0]=v[328];
    Amat[2][2][2][1]=v[330];
    Amat[2][2][2][2]=2e0*F[2][2]*v[149]+F[2][1]*v[207]+F[2][0]*v[242]+v[321];
};

    
/*************************************************************
 * AceGen    6.921 MacOSX (29 Jan 19)                         *
 *           Co. J. Korelc  2013           17 Jul 19 15:09:55 *
 **************************************************************
 User     : Full professional version
 Notebook : st_venant_kirchhoff_3d
 Evaluation time                 : 3 s     Mode  : Optimal
 Number of formulae              : 91      Method: Automatic
 Subroutine                      : stvk3d size: 2846
 Total size of Mathematica  code : 2846 subexpressions
 Total size of C code            : 5830 bytes */

/******************* S U B R O U T I N E *********************/
template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::stvk3d(double* v,double (*lam),double (*mue),double** F
            ,double** Pmat,double**** Amat)
{
    v[169]=Power(F[0][0],2);
    v[168]=2e0*(*mue);
    v[167]=Power(F[0][2],2);
    v[166]=F[2][2]*(*mue);
    v[165]=F[2][1]*(*mue);
    v[164]=F[2][0]*(*mue);
    v[163]=F[1][2]*(*mue);
    v[162]=F[1][1]*(*mue);
    v[161]=F[1][0]*(*mue);
    v[88]=F[0][0]*(*mue);
    v[116]=F[0][0]*v[88];
    v[70]=F[0][1]*(*lam);
    v[93]=F[0][1]*(*mue);
    v[117]=F[0][1]*v[93];
    v[71]=F[0][2]*(*lam);
    v[105]=(*mue)*v[167];
    v[72]=F[1][0]*(*lam);
    v[85]=2e0*v[161]+v[72];
    v[142]=F[1][0]*v[161];
    v[121]=F[0][0]*v[161];
    v[73]=F[1][1]*(*lam);
    v[100]=F[0][1]*v[161]+F[0][0]*v[73];
    v[82]=2e0*v[162]+v[73];
    v[143]=F[1][1]*v[162];
    v[122]=F[0][1]*v[162];
    v[108]=F[0][0]*v[162]+F[0][1]*v[72];
    v[74]=F[1][2]*(*lam);
    v[111]=F[0][2]*v[162]+F[0][1]*v[74];
    v[101]=F[0][2]*v[161]+F[0][0]*v[74];
    v[79]=2e0*v[163]+v[74];
    v[123]=v[121]+v[122]+F[0][2]*v[79];
    v[135]=F[1][2]*v[163];
    v[120]=F[0][1]*v[163]+F[0][2]*v[73];
    v[119]=F[0][0]*v[163]+F[0][2]*v[72];
    v[109]=F[0][2]*v[163];
    v[110]=v[109]+v[121]+F[0][1]*v[82];
    v[99]=v[109]+v[122]+F[0][0]*v[85];
    v[75]=F[2][0]*(*lam);
    v[86]=2e0*v[164]+v[75];
    v[156]=F[2][0]*v[164];
    v[147]=F[1][0]*v[164];
    v[126]=F[0][0]*v[164];
    v[76]=F[2][1]*(*lam);
    v[133]=F[1][1]*v[164]+F[1][0]*v[76];
    v[103]=F[0][1]*v[164]+F[0][0]*v[76];
    v[83]=2e0*v[165]+v[76];
    v[157]=F[2][1]*v[165];
    v[148]=F[1][1]*v[165];
    v[138]=F[1][0]*v[165]+F[1][1]*v[75];
    v[127]=F[0][1]*v[165];
    v[112]=F[0][0]*v[165]+F[0][1]*v[75];
    v[77]=F[2][2]*(*lam);
    v[141]=F[1][2]*v[165]+F[1][1]*v[77];
    v[134]=F[1][2]*v[164]+F[1][0]*v[77];
    v[115]=F[0][2]*v[165]+F[0][1]*v[77];
    v[104]=F[0][2]*v[164]+F[0][0]*v[77];
    v[80]=2e0*v[166]+v[77];
    v[149]=v[147]+v[148]+F[1][2]*v[80];
    v[128]=v[126]+v[127]+F[0][2]*v[80];
    v[153]=F[2][2]*v[166];
    v[146]=F[1][1]*v[166]+F[1][2]*v[76];
    v[145]=F[1][0]*v[166]+F[1][2]*v[75];
    v[139]=F[1][2]*v[166];
    v[140]=v[139]+v[147]+F[1][1]*v[83];
    v[132]=v[139]+v[148]+F[1][0]*v[86];
    v[125]=F[0][1]*v[166]+F[0][2]*v[76];
    v[124]=F[0][0]*v[166]+F[0][2]*v[75];
    v[113]=F[0][2]*v[166];
    v[114]=v[113]+v[126]+F[0][1]*v[83];
    v[102]=v[113]+v[127]+F[0][0]*v[86];
    v[24]=(-1e0+Power(F[1][0],2)+Power(F[2][0],2)+v[169])/2e0;
    v[28]=(-1e0+Power(F[0][1],2)+Power(F[1][1],2)+Power(F[2][1],2))/2e0;
    v[32]=(-1e0+Power(F[1][2],2)+Power(F[2][2],2)+v[167])/2e0;
    v[36]=(*lam)*(v[24]+v[28]+v[32]);
    v[35]=2e0*(*mue)*v[32]+v[36];
    v[37]=2e0*(*mue)*v[28]+v[36];
    v[38]=2e0*(*mue)*v[24]+v[36];
    v[39]=(F[0][0]*F[0][2]+F[1][0]*F[1][2]+F[2][0]*F[2][2])*(*mue);
    v[152]=F[2][2]*v[164]+v[39]+F[2][0]*v[77];
    v[131]=F[1][2]*v[161]+v[39]+F[1][0]*v[74];
    v[98]=v[39]+F[0][0]*v[71]+F[0][2]*v[88];
    v[40]=(F[0][1]*F[0][2]+F[1][1]*F[1][2]+F[2][1]*F[2][2])*(*mue);
    v[155]=F[2][2]*v[165]+v[40]+F[2][1]*v[77];
    v[137]=F[1][2]*v[162]+v[40]+F[1][1]*v[74];
    v[107]=v[40]+F[0][1]*v[71]+F[0][2]*v[93];
    v[41]=(F[0][0]*F[0][1]+F[1][0]*F[1][1]+F[2][0]*F[2][1])*(*mue);
    v[151]=F[2][1]*v[164]+v[41]+F[2][0]*v[76];
    v[130]=F[1][1]*v[161]+v[41]+F[1][0]*v[73];
    v[97]=v[41]+F[0][0]*v[70]+F[0][1]*v[88];
    Pmat[0][0]=F[0][0]*v[38]+F[0][2]*v[39]+F[0][1]*v[41];
    Pmat[0][1]=F[0][1]*v[37]+F[0][2]*v[40]+F[0][0]*v[41];
    Pmat[0][2]=F[0][2]*v[35]+F[0][0]*v[39]+F[0][1]*v[40];
    Pmat[1][0]=F[1][0]*v[38]+F[1][2]*v[39]+F[1][1]*v[41];
    Pmat[1][1]=F[1][1]*v[37]+F[1][2]*v[40]+F[1][0]*v[41];
    Pmat[1][2]=F[1][2]*v[35]+F[1][0]*v[39]+F[1][1]*v[40];
    Pmat[2][0]=F[2][0]*v[38]+F[2][2]*v[39]+F[2][1]*v[41];
    Pmat[2][1]=F[2][1]*v[37]+F[2][2]*v[40]+F[2][0]*v[41];
    Pmat[2][2]=F[2][2]*v[35]+F[2][0]*v[39]+F[2][1]*v[40];
    Amat[0][0][0][0]=v[105]+v[117]+((*lam)+v[168])*v[169]+v[38];
    Amat[0][0][0][1]=v[97];
    Amat[0][0][0][2]=v[98];
    Amat[0][0][1][0]=v[99];
    Amat[0][0][1][1]=v[100];
    Amat[0][0][1][2]=v[101];
    Amat[0][0][2][0]=v[102];
    Amat[0][0][2][1]=v[103];
    Amat[0][0][2][2]=v[104];
    Amat[0][1][0][0]=v[97];
    Amat[0][1][0][1]=v[105]+v[116]+v[37]+F[0][1]*(v[70]+2e0*v[93]);
    Amat[0][1][0][2]=v[107];
    Amat[0][1][1][0]=v[108];
    Amat[0][1][1][1]=v[110];
    Amat[0][1][1][2]=v[111];
    Amat[0][1][2][0]=v[112];
    Amat[0][1][2][1]=v[114];
    Amat[0][1][2][2]=v[115];
    Amat[0][2][0][0]=v[98];
    Amat[0][2][0][1]=v[107];
    Amat[0][2][0][2]=v[116]+v[117]+v[35]+F[0][2]*(F[0][2]*v[168]+v[71]);
    Amat[0][2][1][0]=v[119];
    Amat[0][2][1][1]=v[120];
    Amat[0][2][1][2]=v[123];
    Amat[0][2][2][0]=v[124];
    Amat[0][2][2][1]=v[125];
    Amat[0][2][2][2]=v[128];
    Amat[1][0][0][0]=v[99];
    Amat[1][0][0][1]=v[108];
    Amat[1][0][0][2]=v[119];
    Amat[1][0][1][0]=v[135]+v[143]+v[38]+F[1][0]*v[85];
    Amat[1][0][1][1]=v[130];
    Amat[1][0][1][2]=v[131];
    Amat[1][0][2][0]=v[132];
    Amat[1][0][2][1]=v[133];
    Amat[1][0][2][2]=v[134];
    Amat[1][1][0][0]=v[100];
    Amat[1][1][0][1]=v[110];
    Amat[1][1][0][2]=v[120];
    Amat[1][1][1][0]=v[130];
    Amat[1][1][1][1]=v[135]+v[142]+v[37]+F[1][1]*v[82];
    Amat[1][1][1][2]=v[137];
    Amat[1][1][2][0]=v[138];
    Amat[1][1][2][1]=v[140];
    Amat[1][1][2][2]=v[141];
    Amat[1][2][0][0]=v[101];
    Amat[1][2][0][1]=v[111];
    Amat[1][2][0][2]=v[123];
    Amat[1][2][1][0]=v[131];
    Amat[1][2][1][1]=v[137];
    Amat[1][2][1][2]=v[142]+v[143]+v[35]+F[1][2]*v[79];
    Amat[1][2][2][0]=v[145];
    Amat[1][2][2][1]=v[146];
    Amat[1][2][2][2]=v[149];
    Amat[2][0][0][0]=v[102];
    Amat[2][0][0][1]=v[112];
    Amat[2][0][0][2]=v[124];
    Amat[2][0][1][0]=v[132];
    Amat[2][0][1][1]=v[138];
    Amat[2][0][1][2]=v[145];
    Amat[2][0][2][0]=v[153]+v[157]+v[38]+F[2][0]*v[86];
    Amat[2][0][2][1]=v[151];
    Amat[2][0][2][2]=v[152];
    Amat[2][1][0][0]=v[103];
    Amat[2][1][0][1]=v[114];
    Amat[2][1][0][2]=v[125];
    Amat[2][1][1][0]=v[133];
    Amat[2][1][1][1]=v[140];
    Amat[2][1][1][2]=v[146];
    Amat[2][1][2][0]=v[151];
    Amat[2][1][2][1]=v[153]+v[156]+v[37]+F[2][1]*v[83];
    Amat[2][1][2][2]=v[155];
    Amat[2][2][0][0]=v[104];
    Amat[2][2][0][1]=v[115];
    Amat[2][2][0][2]=v[128];
    Amat[2][2][1][0]=v[134];
    Amat[2][2][1][1]=v[141];
    Amat[2][2][1][2]=v[149];
    Amat[2][2][2][0]=v[152];
    Amat[2][2][2][1]=v[155];
    Amat[2][2][2][2]=v[156]+v[157]+v[35]+F[2][2]*v[80];
};
/*************************************************************
 * AceGen    6.921 MacOSX (29 Jan 19)                         *
 *           Co. J. Korelc  2013           17 Jul 19 16:01:42 *
 **************************************************************
 User     : Full professional version
 Notebook : st_venant_kirchhoff_2d
 Evaluation time                 : 1 s     Mode  : Optimal
 Number of formulae              : 25      Method: Automatic
 Subroutine                      : stvk2d size: 772
 Total size of Mathematica  code : 772 subexpressions
 Total size of C code            : 1672 bytes */


/******************* S U B R O U T I N E *********************/
template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::stvk2d(double* v, double (*lam),double (*mue),double** F
            ,double** Pmat,double**** Amat)
{
    v[43]=F[0][0]*F[1][0];
    v[42]=F[0][1]*F[1][1];
    v[37]=Power(F[0][0],2);
    v[12]=F[0][0]/2e0;
    v[36]=Power(F[0][1],2);
    v[34]=F[0][0]*F[0][1];
    v[11]=F[0][1]/2e0;
    v[27]=Power(F[1][0],2);
    v[31]=-1e0+v[27]+v[37];
    v[14]=F[1][0]/2e0;
    v[25]=Power(F[1][1],2);
    v[26]=-1e0+v[25]+v[36];
    v[23]=F[1][0]*F[1][1];
    v[22]=v[23]+v[34];
    v[35]=(*lam)*v[34]+(*mue)*(v[22]+v[34]);
    v[24]=(*lam)*v[23]+(*mue)*(v[22]+v[23]);
    v[21]=(*lam)*v[42]+2e0*(*mue)*(2e0*v[12]*v[14]+v[42]);
    v[20]=F[0][0]*F[1][1]*(*lam)+4e0*(*mue)*v[11]*v[14];
    v[13]=F[1][1]/2e0;
    v[30]=F[0][1]*F[1][0]*(*lam)+4e0*(*mue)*v[12]*v[13];
    v[29]=(*lam)*v[43]+2e0*(*mue)*(2e0*v[11]*v[13]+v[43]);
    v[44]=2e0*v[22];
    v[32]=((*lam)*(v[26]+v[31]))/2e0;
    Pmat[0][0]=F[0][0]*v[32]+(*mue)*(F[0][0]*v[31]+v[11]*v[44]);
    Pmat[0][1]=F[0][1]*v[32]+(*mue)*(F[0][1]*v[26]+v[12]*v[44]);
    Pmat[1][0]=F[1][0]*v[32]+(*mue)*(F[1][0]*v[31]+v[13]*v[44]);
    Pmat[1][1]=F[1][1]*v[32]+(*mue)*(F[1][1]*v[26]+v[14]*v[44]);
    Amat[0][0][0][0]=v[32]+(*lam)*v[37]+(*mue)*(v[31]+v[36]+2e0*v[37]);
    Amat[0][0][0][1]=v[35];
    Amat[0][0][1][0]=v[29];
    Amat[0][0][1][1]=v[20];
    Amat[0][1][0][0]=v[35];
    Amat[0][1][0][1]=v[32]+(*lam)*v[36]+(*mue)*(v[26]+2e0*v[36]+v[37]);
    Amat[0][1][1][0]=v[30];
    Amat[0][1][1][1]=v[21];
    Amat[1][0][0][0]=v[29];
    Amat[1][0][0][1]=v[30];
    Amat[1][0][1][0]=(*lam)*v[27]+(*mue)*(v[25]+2e0*v[27]+v[31])+v[32];
    Amat[1][0][1][1]=v[24];
    Amat[1][1][0][0]=v[20];
    Amat[1][1][0][1]=v[21];
    Amat[1][1][1][0]=v[24];
    Amat[1][1][1][1]=(*lam)*v[25]+(*mue)*(2e0*v[25]+v[26]+v[27])+v[32];
};

    
/*************************************************************
 * AceGen    6.818 Linux (13 Sep 17)                          *
 *           Co. J. Korelc  2013           21 May 19 12:35:39 *
 **************************************************************
 User     : Full professional version
 Notebook : T2_TPM_up_LE_Iso_Gal
 Evaluation time                 : 6 s     Mode  : Optimal
 Number of formulae              : 324     Method: Automatic
 Subroutine                      : SKR size: 3659
 Subroutine                      : SPP size: 2226
 Total size of Mathematica  code : 5885 subexpressions
 Total size of C code            : 16126 bytes */
template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::SMTSetElSpecBiot(ElementSpec *es,int *idata,int ic,int ng, vec_dbl_Type& paraVec)
{
    int dim = domainVec_[0]->getDimension();
    int intc,nd,i;FILE *SMSFile;
    static int pn[24]={1, 4, 2, 5, 3, 6, 0, 1, 4, 6, -1, 4, 2, 5, -1, 6, 4, 5, -1, 6, 5, 3, -1, 0};
    static int dof[9]={2, 2, 2, 2, 2, 2, 1, 1, 1};
    static int nsto[9]={0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    static int ndat[9]={0, 0, 0, 0, 0, 0, 0, 0, 0};

    static char *nid[]={"D","D","D","D","D","D",
        "p","p","p"};

    
    //Name der Daten in es->Data
    static char *gdcs[]={   "$[Gamma]$NM -Newmark Parameter",
                            "$[Beta]$NM -Newmark Parameter",
                            "ns0s -initial volume fraction solid",
                            "kL -Darcy parameter",
                            "E -Youngs modulus",
                            "$[Nu]$ -Poissons Ratio"};
        
    //soll in es->Data
//    static double defd[]={  gamma,
//                            beta,
//                            ns_init_solid,
//                            darcyPara,
//                            youngsModulus,
//                            poissonRatio,
//                            0e0 /*this is not used*/};
    static char *gpcs[]={""};
    static char *npcs[]={"p","u1","u2","u3","$[Sigma]$11","$[Sigma]$22",
        "$[Sigma]$33","$[Sigma]$12","$[Sigma]$23","$[Sigma]$31","seepage1","seepage2"};
    static char *sname[]={""};
    static char *idname[]={""};
    static int idindex[1];
    static char *rdname[]={""};
    static char *cswitch[]={""};
    static int iswitch[1]={0};
    static double dswitch[1]={0e0};
    static int rdindex[1];
    static int nspecs[9];
    static double version[3]={6.818,6.818,11.1};
    static double pnweights[9]={1e0,1e0,1e0,1e0,1e0,1e0,
        0e0,0e0,0e0};
    //bestimmt die Koordinaten fuer das Refernezelement
    static double rnodes[27]={  1e0,0e0,0e0,
                                0e0,1e0,0e0,
                                0e0,0e0,0e0,
                                0.5e0,0e0,0e0,
                                0.5e0,0.5e0,0e0,
                                0e0,0.5e0,0e0,
                                1e0,0e0,0e0,
                                0e0,1e0,0e0,
                                0e0,0e0,0e0 };
    
    es->ReferenceNodes=rnodes;
    if(ng==-1) es->Data= &paraVec[0];
    es->id.NoDomainData=6;
    es->Code="T2_TPM_up_LE_Iso_Gal";
    es->Version=version;
    es->MainTitle="";
    es->SubTitle="";
    es->SubSubTitle="";
    es->Bibliography="";
    //WorkingVectoSize fehlt hier. Wird fuer v[WorkingVectorSize] benoetigt.
    es->id.NoDimensions = dim ;
    es->id.NoDOFGlobal=15; //anpassen
    es->id.NoDOFCondense=0;
    es->id.NoNodes=9;//anpassen
    es->id.NoSegmentPoints=23;//was tut das?
    es->Segments=pn;
    es->PostNodeWeights=pnweights;
    es->id.NoIntSwitch=0;//was tut das?
    es->IntSwitch=iswitch;//was tut das?
    es->id.DemoLimitation=0;//was tut das?
    es->id.NoDoubleSwitch=0;//was tut das?
    es->DoubleSwitch=dswitch;//was tut das?
    es->id.NoCharSwitch=0;//was tut das?
    es->CharSwitch=cswitch;//was tut das?
    es->DOFGlobal=dof;
    es->NodeID=nid;
    es->id.NoGPostData=0;
    es->id.NoNPostData=12;//was tut das?
    es->id.SymmetricTangent=0;
    es->id.CreateDummyNodes=0;
    es->id.PostIterationCall=0;//was tut das?
    es->id.DOFScaling=0;//was tut das?
    es->Topology="XX";
    es->DomainDataNames=gdcs;//warum? dies sind die Parameter
    es->GPostNames=gpcs;
    es->NPostNames=npcs;
    es->AdditionalNodes="{}&";
    es->AdditionalGraphics="{}&";
    es->MMAInitialisation=MMAInitialisationCode;
    es->MMANextStep="";
    es->MMAStepBack="";
    es->MMAPreIteration="";
    es->IDataNames=idname;
    es->IDataIndex=idindex;
    es->RDataNames=rdname;
    es->RDataIndex=rdindex;
    es->id.NoIData=0;
    es->id.NoRData=0;
    es->id.ShapeSensitivity=0;
    es->id.EBCSensitivity=0;
    es->id.SensitivityOrder=0;
    es->id.NoSensNames=0;
    es->SensitivityNames=sname;
    es->NodeSpecs=nspecs;
    //es->user.SPP=SPP; //not used atm
//    es->user.SKR=SKR; //do we need this?
    
    es->id.DefaultIntegrationCode=35;
    if(ic==-1){intc=35;} else {intc=ic;};
    es->id.IntCode=intc;
    // we should know the suitable length of idata
    es->IntPoints = SMTMultiIntPoints(&intc,idata,&es->id.NoIntPoints,
                      &es->id.NoIntPointsA,&es->id.NoIntPointsB,&es->id.NoIntPointsC,1);
    es->id.NoAdditionalData=(int)(0);
    //Laenge von NoTimeStorage muss zu hp bzw. ht passen, siehe ed->hp und ed->ht in SKR
    es->id.NoTimeStorage=(int)(24);
    es->id.NoElementData=(int)(0);
    
    es->NoNodeStorage=nsto;es->NoNodeData=ndat;
    
};

template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::SMTSetElSpecBiotStVK(ElementSpec *es,int *idata,int ic,int ng, vec_dbl_Type& paraVec)
{
    
  int intc,nd,i;FILE *SMSFile;

  static int pn[9]={1, 2, 3, 0, 1, 2, 3, -1, 0};
  static int dof[9]={2, 2, 2, 2, 2, 2, 1, 1, 1};
  static int nsto[9]={0, 0, 0, 0, 0, 0, 0, 0, 0};

  static int ndat[9]={0, 0, 0, 0, 0, 0, 0, 0, 0};

  static char *nid[]={"D","D","D","D","D","D",
                       "p","p","p"};
  static char *gdcs[]={ "E -Youngs modulus",
                        "$[Nu]$ -Poissons Ratio",
                        "ns0s -initial volume fraction solid",
                        "kL -Darcy parameter",
                        "$[Gamma]$NM -Newmark Parameter",
                        "$[Beta]$NM -Newmark Parameter"};
  
  static char *gpcs[]={"p","u1","u2","u3","$[Sigma]$11","$[Sigma]$22",
                       "$[Sigma]$33","$[Sigma]$12","$[Sigma]$23","$[Sigma]$31","seepage1","seepage2"};
  static char *npcs[]={""};
  static char *sname[]={""};
  static char *idname[]={""};
  static int idindex[1];
  static char *rdname[]={""};
  static char *cswitch[]={""};
  static int iswitch[1]={0};
  static double dswitch[1]={0e0};
  static int rdindex[1];
  static int nspecs[9];
  static double version[3]={6.818,6.818,11.1};
  static double pnweights[9]={1e0,1e0,1e0,0e0,0e0,0e0,
  0e0,0e0,0e0};
  static double rnodes[27]={1e0,0e0,0e0,0e0,1e0,0e0,
  0e0,0e0,0e0,0.5e0,0e0,0e0,
  0.5e0,0.5e0,0e0,0e0,0.5e0,0e0,
  1e0,0e0,0e0,0e0,1e0,0e0,
  0e0,0e0,0e0};
  es->ReferenceNodes=rnodes;
  if(ng==-1) es->Data= &paraVec[0];
  es->id.NoDomainData=6;
  es->Code="T2T1_up_nichtlinear_iso_gal_2020_02_05";es->Version=version;
  es->MainTitle="";
  es->SubTitle="";
  es->SubSubTitle="";
  es->Bibliography="";
  es->id.NoDimensions=2;es->id.NoDOFGlobal=15;es->id.NoDOFCondense=0;es->id.NoNodes=9;
  es->id.NoSegmentPoints=8;es->Segments=pn;es->PostNodeWeights=pnweights;
  es->id.NoIntSwitch=0;es->IntSwitch=iswitch;es->id.DemoLimitation=0;
  es->id.NoDoubleSwitch=0;es->DoubleSwitch=dswitch;
  es->id.NoCharSwitch=0;es->CharSwitch=cswitch;
  es->DOFGlobal=dof;es->NodeID=nid;es->id.NoGPostData=12;es->id.NoNPostData=0;
  es->id.SymmetricTangent=0;es->id.CreateDummyNodes=0;es->id.PostIterationCall=0;es->id.DOFScaling=0;
  es->Topology="XX";es->DomainDataNames=gdcs;es->GPostNames=gpcs;es->NPostNames=npcs;
  es->AdditionalNodes="{}&";
  es->AdditionalGraphics="{}&";
  es->MMAInitialisation=MMAInitialisationCode;
  es->MMANextStep="";
  es->MMAStepBack="";
  es->MMAPreIteration="";
  es->IDataNames=idname;es->IDataIndex=idindex;es->RDataNames=rdname;es->RDataIndex=rdindex;
  es->id.NoIData=0;es->id.NoRData=0;
  es->id.ShapeSensitivity=0; es->id.EBCSensitivity=0;es->id.SensitivityOrder=0;
  es->id.NoSensNames=0;es->SensitivityNames=sname;es->NodeSpecs=nspecs;
//  es->user.SPP=SPP;
//    es->user.SKR=SKR;

  es->id.DefaultIntegrationCode=35;
  if(ic==-1){intc=35;} else {intc=ic;};
  es->id.IntCode=intc;
  es->IntPoints = SMTMultiIntPoints(&intc,idata,&es->id.NoIntPoints,
                      &es->id.NoIntPointsA,&es->id.NoIntPointsB,&es->id.NoIntPointsC,1);

  es->id.NoAdditionalData=(int)(0);
  es->id.NoTimeStorage=(int)(24);
  es->id.NoElementData=(int)(0);

  es->NoNodeStorage=nsto;es->NoNodeData=ndat;

};

/*************************************************************
* AceGen    7.114 Linux (9 Jul 20)                           *
*           Co. J. Korelc  2020           4 Sep 20 16:26:52  *
**************************************************************
User     : Full professional version
Notebook : O2O1_up_lin_el_iso_gal_Newmark_mesh_koeln_1D_Ehlers_2020_09_04
Evaluation time                 : 23 s    Mode  : Optimal
Number of formulae              : 521     Method: Automatic
Subroutine                      : SKR size: 7982
Subroutine                      : SPP size: 2615
Total size of Mathematica  code : 10597 subexpressions
Total size of C code            : 31924 bytes */
//Added 07.09.2020 CH
template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::SMTSetElSpecBiot3D(ElementSpec *es,int *idata,int ic,int ng, vec_dbl_Type& paraVec)
{
    int intc,nd,i;FILE *SMSFile;
    static int pn[33]={1, 2, 4, 0, 1, 4, 3, 0, 1, 2, 3, 0, 2, 3, 4, 0, 1, 2, 4, -1, 1, 4, 3, -2, 1, 2, 3, -3, 2, 3, 4, -4, 0};
    static int dof[14]={3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1};
    static int nsto[14]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    static int ndat[14]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    //static int esdat[1]={0}; only used in new release
    
    static char *nid[]={"D","D","D","D","D","D",
        "D","D","D","D","p","p",
        "p","p"};
    static char *gdcs[]={"E -Youngs modulus","$[Nu]$ -Poissons Ratio","bx -body force","by -body force","bz -body force","ns0s -initial volume fraction solid",
        "kL -Darcy parameter","$[Rho]$SR -effective density solid","$[Rho]$FR -effective density solid","g -gravity","$[Gamma]$NM -Newmark Parameter","$[Beta]$NM -Newmark Parameter"};
    static double defd[]={200e0,0e0,0e0,0e0,0e0,0.67e0,
        0.1e-3,2000e0,1000e0,0.9810000000000001e1,0.5e0,0.25e0,
        0e0};
    static char *gpcs[]={"p","u1","u2","u3","$[Sigma]$11","$[Sigma]$22",
        "$[Sigma]$33","$[Sigma]$12","$[Sigma]$23","$[Sigma]$31","seepage1","seepage2",
        "seepage3"};
    static char *npcs[]={""};
    static char *sname[]={""};
    static char *idname[]={""};
    static int idindex[1];
    static char *rdname[]={""};
    static char *cswitch[]={""};
    static int iswitch[1]={0};
    static double dswitch[1]={0e0};
    static int rdindex[1];
    static int nspecs[14];
    static double version[3]={7.114,7.114,11.1};
    static double pnweights[14]={1e0,1e0,1e0,1e0,0e0,0e0,
        0e0,0e0,0e0,0e0,0e0,0e0,
        0e0,0e0};
    static double rnodes[42]={1e0,0e0,0e0,0e0,1e0,0e0,
        0e0,0e0,1e0,0e0,0e0,0e0,
        0.5e0,0.5e0,0e0,0e0,0.5e0,0.5e0,
        0.5e0,0e0,0.5e0,0.5e0,0e0,0e0,
        0e0,0.5e0,0e0,0e0,0e0,0.5e0,
        1e0,0e0,0e0,0e0,1e0,0e0,
        0e0,0e0,1e0,0e0,0e0,0e0};
    es->ReferenceNodes=rnodes;
    
    if(ng==-1)
        es->Data=&paraVec[0];
    //es->Data=defd;
    es->id.NoDomainData=12;
    es->Code="O2O1_up_lin_el_iso_gal_Newmark_mesh_koeln_1D_Ehlers_2020_09_04";es->Version=version;
    es->MainTitle="";
    es->SubTitle="";
    es->SubSubTitle="";
    es->Bibliography="";
    es->id.NoDimensions=3;es->id.NoDOFGlobal=34;es->id.NoDOFCondense=0;es->id.NoNodes=14;
    es->id.NoSegmentPoints=32;es->Segments=pn;es->PostNodeWeights=pnweights;
    es->id.NoIntSwitch=0;es->IntSwitch=iswitch;
    //es->id.LocalReKe=0; LocalReKe is new and had a different name before (see sms.h(pp)). Was changed with new AceGen/AceFEM release.
    es->id.NoDoubleSwitch=0;es->DoubleSwitch=dswitch;
    es->id.NoCharSwitch=0;es->id.WorkingVectorSize=1817;es->CharSwitch=cswitch;
    es->DOFGlobal=dof;es->NodeID=nid;es->id.NoGPostData=13;es->id.NoNPostData=0;
    es->id.SymmetricTangent=0;es->id.PostIterationCall=0;es->id.DOFScaling=0;
    es->Topology="XX";es->DomainDataNames=gdcs;es->GPostNames=gpcs;es->NPostNames=npcs;
    es->AdditionalNodes="{}&";
    es->AdditionalGraphics="{Null,Null,Null}";
    es->MMAInitialisation=MMAInitialisationCode;
    es->MMANextStep="";
    es->MMAStepBack="";
    es->MMAPreIteration="";
    es->IDataNames=idname;es->IDataIndex=idindex;es->RDataNames=rdname;es->RDataIndex=rdindex;
    es->id.NoIData=0;es->id.NoRData=0;
    es->id.ShapeSensitivity=0; es->id.EBCSensitivity=0;es->id.SensitivityOrder=0;
    es->id.NoSensNames=0;es->SensitivityNames=sname;es->NodeSpecs=nspecs;
//    es->user.SPP=SPP;
//    es->user.SKR=SKR;
    
    es->id.DefaultIntegrationCode=40;
    if(ic==-1){intc=40;} else {intc=ic;};
    es->id.IntCode=intc;
    es->IntPoints = SMTMultiIntPoints(&intc,idata,&es->id.NoIntPoints,
                      &es->id.NoIntPointsA,&es->id.NoIntPointsB,&es->id.NoIntPointsC,1);
    es->id.NoAdditionalData=(int)(0);
    es->id.NoTimeStorage=(int)(60);
    es->id.NoElementData=(int)(0);
    
    
    es->NoNodeStorage=nsto;es->NoNodeData=ndat;
    
    //es->ExtraSensitivityData=esdat;
    //ExtraSensitivityData is new. Was introduced with new AceGen/AceFEM release.
};



template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::SKR_Biot(double* v,ElementSpec *es,ElementData *ed,NodeSpec **ns
                               ,NodeData **nd,double *rdata,int *idata,double *p,double **s)
{
    int i107,i109,i215,i230;
    v[5162]=0e0;
    v[5163]=0e0;
    v[5164]=0e0;
    v[5165]=0e0;
    v[5166]=0e0;
    v[5167]=0e0;
    v[5168]=0e0;
    v[5169]=1e0;
    v[5170]=0e0;
    v[5171]=-1e0;
    v[5172]=0e0;
    v[5173]=0e0;
    v[5174]=0e0;
    v[5175]=0e0;
    v[5176]=0e0;
    v[5132]=0e0;
    v[5133]=0e0;
    v[5134]=0e0;
    v[5135]=0e0;
    v[5136]=0e0;
    v[5137]=0e0;
    v[5138]=0e0;
    v[5139]=1e0;
    v[5140]=0e0;
    v[5141]=0e0;
    v[5142]=0e0;
    v[5143]=-1e0;
    v[5144]=0e0;
    v[5145]=0e0;
    v[5146]=0e0;
    v[5102]=0e0;
    v[5103]=0e0;
    v[5104]=0e0;
    v[5105]=0e0;
    v[5106]=0e0;
    v[5107]=0e0;
    v[5108]=1e0;
    v[5109]=0e0;
    v[5110]=-1e0;
    v[5111]=0e0;
    v[5112]=0e0;
    v[5113]=0e0;
    v[5114]=0e0;
    v[5115]=0e0;
    v[5116]=0e0;
    v[5072]=0e0;
    v[5073]=0e0;
    v[5074]=0e0;
    v[5075]=0e0;
    v[5076]=0e0;
    v[5077]=0e0;
    v[5078]=1e0;
    v[5079]=0e0;
    v[5080]=0e0;
    v[5081]=0e0;
    v[5082]=-1e0;
    v[5083]=0e0;
    v[5084]=0e0;
    v[5085]=0e0;
    v[5086]=0e0;
    v[5057]=0e0;
    v[5058]=0e0;
    v[5059]=0e0;
    v[5060]=0e0;
    v[5061]=0e0;
    v[5062]=0e0;
    v[5063]=0e0;
    v[5064]=0e0;
    v[5065]=0e0;
    v[5066]=0e0;
    v[5067]=0e0;
    v[5068]=0e0;
    v[5069]=1e0;
    v[5070]=0e0;
    v[5071]=-1e0;
    v[5042]=0e0;
    v[5043]=0e0;
    v[5044]=0e0;
    v[5045]=0e0;
    v[5046]=0e0;
    v[5047]=0e0;
    v[5048]=0e0;
    v[5049]=0e0;
    v[5050]=0e0;
    v[5051]=0e0;
    v[5052]=0e0;
    v[5053]=0e0;
    v[5054]=0e0;
    v[5055]=1e0;
    v[5056]=-1e0;
    
    //es->Data sind Materialparameter
    v[191]=es->Data[5];
    v[194]=es->Data[4]/(2e0*(1e0+v[191]));
    v[192]=(2e0*v[191]*v[194])/(1e0-2e0*v[191]);
    v[186]=es->Data[3];
    v[183]=es->Data[2];
    // nd sind Nodalwerte, Anzahl an structs in nd sollte den Knoten entsprechen, bei P2-P1 in 2D also 9
    // In X stehen die Koordinaten, X[0] ist x-Koordinate, X[1] ist y-Koordinate, etc.
    v[1]=nd[0]->X[0];
    v[2]=nd[0]->X[1];
    v[3]=nd[1]->X[0];
    v[4]=nd[1]->X[1];
    v[5]=nd[2]->X[0];
    v[6]=nd[2]->X[1];
    v[7]=nd[3]->X[0];
    v[8]=nd[3]->X[1];
    v[9]=nd[4]->X[0];
    v[10]=nd[4]->X[1];
    v[11]=nd[5]->X[0];
    v[12]=nd[5]->X[1];
    // at ist die Loesung im letzten Newtonschritt.
    v[19]=nd[0]->at[0];
    v[20]=nd[0]->at[1];
    v[21]=nd[1]->at[0];
    v[22]=nd[1]->at[1];
    v[23]=nd[2]->at[0];
    v[24]=nd[2]->at[1];
    v[25]=nd[3]->at[0];
    v[26]=nd[3]->at[1];
    v[27]=nd[4]->at[0];
    v[28]=nd[4]->at[1];
    v[29]=nd[5]->at[0];
    v[30]=nd[5]->at[1];
    v[31]=nd[6]->at[0];
    v[32]=nd[7]->at[0];
    v[33]=nd[8]->at[0];
    v[172]=v[32]-v[33];
    v[171]=v[31]-v[33];
    // ap ist die Loesung im letzten Zeitschritt.
    v[490]=-nd[0]->ap[0]+v[19];
    v[497]=-nd[0]->ap[1]+v[20];
    v[492]=-nd[1]->ap[0]+v[21];
    v[498]=-nd[1]->ap[1]+v[22];
    v[493]=-nd[2]->ap[0]+v[23];
    v[499]=-nd[2]->ap[1]+v[24];
    v[494]=-nd[3]->ap[0]+v[25];
    v[500]=-nd[3]->ap[1]+v[26];
    v[495]=-nd[4]->ap[0]+v[27];
    v[501]=-nd[4]->ap[1]+v[28];
    v[496]=-nd[5]->ap[0]+v[29];
    v[488]=-nd[5]->ap[1]+v[30];
    //rdata ist die Zeitschrittweite, RD_TimeIncrement wird in sms.h definiert, entsprechend wird auch die Laenge von rdata dort definiert. Standard 400, aber auch nicht gesetzt. Wert muss selber initialisiert werden; eventuell kuerzer moeglich.
    v[49]=rdata[RD_TimeIncrement];
    //hp:history previous (timestep); previous solution
    v[50]=ed->hp[0];
    v[51]=ed->hp[1];
    v[52]=ed->hp[2];
    v[53]=ed->hp[3];
    v[54]=ed->hp[4];
    v[55]=ed->hp[5];
    v[56]=ed->hp[6];
    v[57]=ed->hp[7];
    v[58]=ed->hp[8];
    v[59]=ed->hp[9];
    v[60]=ed->hp[10];
    v[61]=ed->hp[11];
    v[62]=ed->hp[12];
    v[63]=ed->hp[13];
    v[64]=ed->hp[14];
    v[65]=ed->hp[15];
    v[66]=ed->hp[16];
    v[67]=ed->hp[17];
    v[68]=ed->hp[18];
    v[69]=ed->hp[19];
    v[70]=ed->hp[20];
    v[71]=ed->hp[21];
    v[72]=ed->hp[22];
    v[73]=ed->hp[23];
    v[75]=es->Data[1];
    v[489]=1e0/(Power(v[49],2)*v[75]);
    v[491]=-((v[49]*v[49])*(0.5e0-v[75]));
    v[79]=es->Data[0]/(v[49]*v[75]);
    v[486]=-(v[49]*v[79]);
    v[487]=(1e0+v[486]/2e0)*v[49];
    v[77]=1e0+v[486];
    v[76]=v[487]*v[62]+v[50]*v[77]+v[490]*v[79];
    v[80]=v[487]*v[68]+v[56]*v[77]+v[497]*v[79];
    v[81]=v[487]*v[63]+v[51]*v[77]+v[492]*v[79];
    v[82]=v[487]*v[69]+v[57]*v[77]+v[498]*v[79];
    v[83]=v[487]*v[64]+v[52]*v[77]+v[493]*v[79];
    v[84]=v[487]*v[70]+v[58]*v[77]+v[499]*v[79];
    v[85]=v[487]*v[65]+v[53]*v[77]+v[494]*v[79];
    v[86]=v[487]*v[71]+v[59]*v[77]+v[500]*v[79];
    v[87]=v[487]*v[66]+v[54]*v[77]+v[495]*v[79];
    v[88]=v[487]*v[72]+v[60]*v[77]+v[501]*v[79];
    v[89]=v[487]*v[67]+v[55]*v[77]+v[496]*v[79];
    v[90]=v[487]*v[73]+v[61]*v[77]+v[488]*v[79];
    
    ed->ht[0]=v[76];
    ed->ht[1]=v[81];
    ed->ht[2]=v[83];
    ed->ht[3]=v[85];
    ed->ht[4]=v[87];
    ed->ht[5]=v[89];
    ed->ht[6]=v[80];
    ed->ht[7]=v[82];
    ed->ht[8]=v[84];
    ed->ht[9]=v[86];
    ed->ht[10]=v[88];
    ed->ht[11]=v[90];
    ed->ht[12]=v[489]*(v[490]-v[49]*v[50]+v[491]*v[62]);
    ed->ht[13]=v[489]*(v[492]-v[49]*v[51]+v[491]*v[63]);
    ed->ht[14]=v[489]*(v[493]-v[49]*v[52]+v[491]*v[64]);
    ed->ht[15]=v[489]*(v[494]-v[49]*v[53]+v[491]*v[65]);
    ed->ht[16]=v[489]*(v[495]-v[49]*v[54]+v[491]*v[66]);
    ed->ht[17]=v[489]*(v[496]-v[49]*v[55]+v[491]*v[67]);
    ed->ht[18]=v[489]*(v[497]-v[49]*v[56]+v[491]*v[68]);
    ed->ht[19]=v[489]*(v[498]-v[49]*v[57]+v[491]*v[69]);
    ed->ht[20]=v[489]*(v[499]-v[49]*v[58]+v[491]*v[70]);
    ed->ht[21]=v[489]*(v[500]-v[49]*v[59]+v[491]*v[71]);
    ed->ht[22]=v[489]*(v[501]-v[49]*v[60]+v[491]*v[72]);
    ed->ht[23]=v[489]*(v[488]-v[49]*v[61]+v[491]*v[73]);
    //es->id.NoIntPoints wird in SMTSetElSpec gesetzt
    for(i107=1;i107<=es->id.NoIntPoints;i107++){
        i109=4*(-1+i107);
        v[108]=es->IntPoints[i109];
        v[137]=4e0*v[108];
        v[132]=-1e0+v[137];
        v[110]=es->IntPoints[1+i109];
        v[136]=4e0*v[110];
        v[133]=-1e0+v[136];
        v[119]=-1e0+v[108]+v[110];
        v[5192]=0e0;
        v[5193]=0e0;
        v[5194]=0e0;
        v[5195]=0e0;
        v[5196]=0e0;
        v[5197]=0e0;
        v[5198]=0e0;
        v[5199]=0e0;
        v[5200]=0e0;
        v[5201]=0e0;
        v[5202]=0e0;
        v[5203]=0e0;
        v[5204]=-v[108];
        v[5205]=-v[110];
        v[5206]=v[119];
        v[139]=-4e0*v[119];
        v[140]=-v[137]+v[139];
        v[138]=-v[136]+v[139];
        v[135]=-1e0+2e0*v[108]+2e0*v[110]+2e0*v[119];
        v[5177]=0e0;
        v[5178]=v[132];
        v[5179]=0e0;
        v[5180]=0e0;
        v[5181]=0e0;
        v[5182]=v[135];
        v[5183]=0e0;
        v[5184]=0e0;
        v[5185]=0e0;
        v[5186]=0e0;
        v[5187]=0e0;
        v[5188]=v[140];
        v[5189]=0e0;
        v[5190]=0e0;
        v[5191]=0e0;
        v[5147]=0e0;
        v[5148]=0e0;
        v[5149]=0e0;
        v[5150]=v[133];
        v[5151]=0e0;
        v[5152]=v[135];
        v[5153]=0e0;
        v[5154]=0e0;
        v[5155]=0e0;
        v[5156]=v[138];
        v[5157]=0e0;
        v[5158]=0e0;
        v[5159]=0e0;
        v[5160]=0e0;
        v[5161]=0e0;
        v[5117]=v[132];
        v[5118]=0e0;
        v[5119]=0e0;
        v[5120]=0e0;
        v[5121]=v[135];
        v[5122]=0e0;
        v[5123]=0e0;
        v[5124]=0e0;
        v[5125]=0e0;
        v[5126]=0e0;
        v[5127]=v[140];
        v[5128]=0e0;
        v[5129]=0e0;
        v[5130]=0e0;
        v[5131]=0e0;
        v[5087]=0e0;
        v[5088]=0e0;
        v[5089]=v[133];
        v[5090]=0e0;
        v[5091]=v[135];
        v[5092]=0e0;
        v[5093]=0e0;
        v[5094]=0e0;
        v[5095]=v[138];
        v[5096]=0e0;
        v[5097]=0e0;
        v[5098]=0e0;
        v[5099]=0e0;
        v[5100]=0e0;
        v[5101]=0e0;
        v[164]=v[135]*v[84];
        v[161]=v[135]*v[83];
        v[153]=v[135]*v[24];
        v[154]=v[153]+v[133]*v[22]+v[138]*v[28]+v[137]*(v[26]-v[30]);
        v[152]=v[153]+v[132]*v[20]+v[136]*(v[26]-v[28])+v[140]*v[30];
        v[150]=v[135]*v[23];
        v[151]=v[150]+v[133]*v[21]+v[138]*v[27]+v[137]*(v[25]-v[29]);
        v[149]=v[150]+v[132]*v[19]+v[136]*(v[25]-v[27])+v[140]*v[29];
        v[145]=v[135]*v[6];
        v[146]=v[10]*v[138]+v[145]+v[133]*v[4]+v[137]*(-v[12]+v[8]);
        v[144]=v[12]*v[140]+v[145]+v[132]*v[2]+v[136]*(-v[10]+v[8]);
        v[142]=v[135]*v[5];
        v[143]=v[142]+v[133]*v[3]+v[137]*(-v[11]+v[7])+v[138]*v[9];
        v[141]=v[1]*v[132]+v[11]*v[140]+v[142]+v[136]*(v[7]-v[9]);
        v[155]=-(v[143]*v[144])+v[141]*v[146];
        v[525]=-(v[143]/v[155]);
        v[529]=v[140]*v[525];
        v[524]=v[141]/v[155];
        v[527]=v[138]*v[524];
        v[523]=v[146]/v[155];
        v[528]=v[140]*v[523];
        v[522]=-(v[144]/v[155]);
        v[526]=v[138]*v[522];
        v[519]=1e0/Power(v[155],2);
        v[503]=v[137]/v[155];
        v[502]=v[136]/v[155];
        v[267]=v[143]*v[502];
        v[266]=v[141]*v[503];
        v[263]=v[146]*v[502];
        v[262]=v[144]*v[503];
        v[148]=es->IntPoints[3+i109]*fabs(v[155]);
        v[176]=(v[146]*v[149]-v[144]*v[151])/v[155];
        v[179]=(-(v[143]*v[152])+v[141]*v[154])/v[155];
        v[195]=v[176]+v[179];
        v[505]=v[192]*v[195]-v[108]*v[31]-v[110]*v[32]+v[119]*v[33];
        v[185]=1e0-v[183]*(1e0+v[195]);
        v[504]=v[186]/(v[155]*v[185]);
        v[510]=v[185]*v[504];
        v[198]=-(((v[143]*v[149]-v[141]*v[151]-v[146]*v[152]+v[144]*v[154])*v[194])/v[155]);
        v[204]=2e0*v[176]*v[194]+v[505];
        v[205]=2e0*v[179]*v[194]+v[505];
        v[208]=(-(v[144]*(v[161]+v[133]*v[81]+v[137]*v[85]+v[138]*v[87]-v[137]*v[89]))+v[146]*(v[161]
                                                                                               +v[132]*v[76]+v[136]*v[85]-v[136]*v[87]+v[140]*v[89])+v[141]*(v[164]+v[133]*v[82]+v[137]*v[86]
                                                                                                                                                             +v[138]*v[88]-v[137]*v[90])-v[143]*(v[164]+v[132]*v[80]+v[136]*v[86]-v[136]*v[88]+v[140]*v[90]))
        /v[155];
        v[210]=(-(v[146]*v[171])+v[144]*v[172])*v[185]*v[504];
        v[211]=(v[143]*v[171]-v[141]*v[172])*v[185]*v[504];
        v[217]=(v[146]*v[198]-v[143]*v[205])/v[155];
        v[225]=v[136]*v[217];
        v[218]=(-(v[144]*v[198])+v[141]*v[205])/v[155];
        v[226]=v[137]*v[218];
        v[219]=(-(v[143]*v[198])+v[146]*v[204])/v[155];
        v[223]=v[136]*v[219];
        v[220]=(v[141]*v[198]-v[144]*v[204])/v[155];
        v[224]=v[137]*v[220];
        v[221]=(v[146]*v[210]-v[143]*v[211])/v[155];
        v[222]=(-(v[144]*v[210])+v[141]*v[211])/v[155];
        v[5023]=v[132]*v[219];
        v[5024]=v[132]*v[217];
        v[5025]=v[133]*v[220];
        v[5026]=v[133]*v[218];
        v[5027]=v[135]*(v[219]+v[220]);
        v[5028]=v[135]*(v[217]+v[218]);
        v[5029]=v[223]+v[224];
        v[5030]=v[225]+v[226];
        v[5031]=v[138]*v[220]-v[223];
        v[5032]=v[138]*v[218]-v[225];
        v[5033]=v[140]*v[219]-v[224];
        v[5034]=v[140]*v[217]-v[226];
        v[5035]=-(v[108]*v[208])+v[221];
        v[5036]=-(v[110]*v[208])+v[222];
        v[5037]=v[119]*v[208]-v[221]-v[222];
//        for(i215=1;i215<=15;i215++){
//        
//            for(i230=1;i230<=15;i230++){
//                std::cout << " pre s[i215-1][i230-1]:"<< s[i215-1][i230-1] << std::endl;
//            }
//            
//        }
        
        for(i215=1;i215<=15;i215++){
            v[233]=v[5041+i215];
            v[234]=v[5056+i215];
            v[509]=v[5191+i215]*v[79];
            v[261]=v[135]*v[509];
            v[260]=v[509]/v[155];
            v[246]=((v[141]*v[233]-v[143]*v[234])*v[510])/v[155];
            v[247]=((-(v[144]*v[233])+v[146]*v[234])*v[510])/v[155];
            v[238]=v[137]*v[5071+i215]+v[5086+i215];
            v[239]=v[136]*v[5101+i215]+v[5116+i215];
            v[240]=(-(v[144]*v[238])+v[146]*v[239])/v[155];
            v[241]=v[137]*v[5131+i215]+v[5146+i215];
            v[242]=v[136]*v[5161+i215]+v[5176+i215];
            v[243]=(v[141]*v[241]-v[143]*v[242])/v[155];
            
            v[256]=v[194]*(v[141]*v[238]-v[143]*v[239]-v[144]*v[241]+v[146]*v[242])*v[519];
            v[245]=v[143]*v[246]-v[146]*v[247];
            v[248]=-(v[141]*v[246])+v[144]*v[247];
            v[249]=-v[240]-v[243];
            v[252]=-(v[192]*v[249]);
            v[520]=(2e0*v[194]*v[243]+v[252])/v[155];
            v[521]=(2e0*v[194]*v[240]+v[252])/v[155];
            v[255]=v[146]*v[256]-v[143]*v[520];
            v[268]=v[136]*v[255];
            v[257]=-(v[144]*v[256])+v[141]*v[520];
            v[269]=v[137]*v[257];
            v[258]=-(v[143]*v[256])+v[146]*v[521];
            v[264]=v[136]*v[258];
            v[259]=v[141]*v[256]-v[144]*v[521];
            v[265]=v[137]*v[259];
            
            v[5207]=v[132]*(v[258]+v[146]*v[260]);
            v[5208]=v[132]*(v[255]-v[143]*v[260]);

            v[5209]=v[133]*(v[259]-v[144]*v[260]);
            v[5210]=v[133]*(v[257]+v[141]*v[260]);
            v[5211]=v[135]*(v[258]+v[259])+v[261]*(v[522]+v[523]);
            v[5212]=v[135]*(v[255]+v[257])+v[261]*(v[524]+v[525]);
            v[5213]=v[264]+v[265]+(-v[262]+v[263])*v[509];
            v[5214]=v[268]+v[269]+(v[266]-v[267])*v[509];
            v[5215]=v[138]*v[259]-v[264]+v[509]*(-v[263]+v[526]);
            v[5216]=v[138]*v[257]-v[268]+v[509]*(v[267]+v[527]);
            v[5217]=v[140]*v[258]-v[265]+v[509]*(v[262]+v[528]);
            v[5218]=v[140]*v[255]-v[269]+v[509]*(-v[266]+v[529]);
            v[5219]=v[245]+v[108]*v[249];
            v[5220]=v[248]+v[110]*v[249];
            v[5221]=-v[245]-v[248]-v[119]*v[249];
            p[i215-1]+=v[148]*v[5022+i215];
            for(i230=1;i230<=15;i230++){
                s[i215-1][i230-1]+=v[148]*v[5206+i230];

            };/* end for */
        };/* end for */
    };/* end for */
};

template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::SKR_Biot_StVK(double* v,ElementSpec *es,ElementData *ed,NodeSpec **ns
                                    ,NodeData **nd,double *rdata,int *idata,double *p,double **s)
{
    int i114,i116,i233,i250,b297;
    FILE *SMSFile;
    v[5132]=0e0;
    v[5133]=0e0;
    v[5134]=0e0;
    v[5135]=0e0;
    v[5136]=0e0;
    v[5137]=0e0;
    v[5138]=0e0;
    v[5139]=1e0;
    v[5140]=0e0;
    v[5141]=-1e0;
    v[5142]=0e0;
    v[5143]=0e0;
    v[5144]=0e0;
    v[5145]=0e0;
    v[5146]=0e0;
    v[5102]=0e0;
    v[5103]=0e0;
    v[5104]=0e0;
    v[5105]=0e0;
    v[5106]=0e0;
    v[5107]=0e0;
    v[5108]=0e0;
    v[5109]=1e0;
    v[5110]=0e0;
    v[5111]=0e0;
    v[5112]=0e0;
    v[5113]=-1e0;
    v[5114]=0e0;
    v[5115]=0e0;
    v[5116]=0e0;
    v[5072]=0e0;
    v[5073]=0e0;
    v[5074]=0e0;
    v[5075]=0e0;
    v[5076]=0e0;
    v[5077]=0e0;
    v[5078]=1e0;
    v[5079]=0e0;
    v[5080]=-1e0;
    v[5081]=0e0;
    v[5082]=0e0;
    v[5083]=0e0;
    v[5084]=0e0;
    v[5085]=0e0;
    v[5086]=0e0;
    v[5042]=0e0;
    v[5043]=0e0;
    v[5044]=0e0;
    v[5045]=0e0;
    v[5046]=0e0;
    v[5047]=0e0;
    v[5048]=1e0;
    v[5049]=0e0;
    v[5050]=0e0;
    v[5051]=0e0;
    v[5052]=-1e0;
    v[5053]=0e0;
    v[5054]=0e0;
    v[5055]=0e0;
    v[5056]=0e0;
    v[5177]=0e0;
    v[5178]=0e0;
    v[5179]=0e0;
    v[5180]=0e0;
    v[5181]=0e0;
    v[5182]=0e0;
    v[5183]=0e0;
    v[5184]=0e0;
    v[5185]=0e0;
    v[5186]=0e0;
    v[5187]=0e0;
    v[5188]=0e0;
    v[5189]=1e0;
    v[5190]=0e0;
    v[5191]=-1e0;
    v[5162]=0e0;
    v[5163]=0e0;
    v[5164]=0e0;
    v[5165]=0e0;
    v[5166]=0e0;
    v[5167]=0e0;
    v[5168]=0e0;
    v[5169]=0e0;
    v[5170]=0e0;
    v[5171]=0e0;
    v[5172]=0e0;
    v[5173]=0e0;
    v[5174]=0e0;
    v[5175]=1e0;
    v[5176]=-1e0;
    v[1]=nd[0]->X[0];
    v[2]=nd[0]->X[1];
    v[3]=nd[1]->X[0];
    v[4]=nd[1]->X[1];
    v[5]=nd[2]->X[0];
    v[6]=nd[2]->X[1];
    v[7]=nd[3]->X[0];
    v[8]=nd[3]->X[1];
    v[9]=nd[4]->X[0];
    v[10]=nd[4]->X[1];
    v[11]=nd[5]->X[0];
    v[12]=nd[5]->X[1];
    v[19]=nd[0]->at[0];
    v[20]=nd[0]->at[1];
    v[21]=nd[1]->at[0];
    v[22]=nd[1]->at[1];
    v[23]=nd[2]->at[0];
    v[24]=nd[2]->at[1];
    v[25]=nd[3]->at[0];
    v[26]=nd[3]->at[1];
    v[27]=nd[4]->at[0];
    v[28]=nd[4]->at[1];
    v[29]=nd[5]->at[0];
    v[30]=nd[5]->at[1];
    v[31]=nd[6]->at[0];
    v[32]=nd[7]->at[0];
    v[33]=nd[8]->at[0];
    v[179]=v[32]-v[33];
    v[178]=v[31]-v[33];
    v[34]=nd[0]->ap[0];
    v[574]=v[19]-v[34];
    v[35]=nd[0]->ap[1];
    v[576]=v[20]-v[35];
    v[36]=nd[1]->ap[0];
    v[578]=v[21]-v[36];
    v[37]=nd[1]->ap[1];
    v[579]=v[22]-v[37];
    v[38]=nd[2]->ap[0];
    v[580]=v[23]-v[38];
    v[39]=nd[2]->ap[1];
    v[581]=v[24]-v[39];
    v[40]=nd[3]->ap[0];
    v[582]=v[25]-v[40];
    v[41]=nd[3]->ap[1];
    v[583]=v[26]-v[41];
    v[42]=nd[4]->ap[0];
    v[584]=v[27]-v[42];
    v[43]=nd[4]->ap[1];
    v[585]=v[28]-v[43];
    v[44]=nd[5]->ap[0];
    v[586]=v[29]-v[44];
    v[45]=nd[5]->ap[1];
    v[587]=v[30]-v[45];
    v[49]=es->Data[0];
    v[50]=es->Data[1];
    v[571]=v[49]/(1e0+v[50]);
    v[51]=(v[50]*v[571])/(1e0-2e0*v[50]);
    v[53]=v[571]/2e0;
    v[54]=es->Data[2];
    v[55]=es->Data[3];
    v[56]=rdata[RD_TimeIncrement];
    v[57]=ed->hp[0];
    v[58]=ed->hp[1];
    v[59]=ed->hp[2];
    v[60]=ed->hp[3];
    v[61]=ed->hp[4];
    v[62]=ed->hp[5];
    v[63]=ed->hp[6];
    v[64]=ed->hp[7];
    v[65]=ed->hp[8];
    v[66]=ed->hp[9];
    v[67]=ed->hp[10];
    v[68]=ed->hp[11];
    v[69]=ed->hp[12];
    v[70]=ed->hp[13];
    v[71]=ed->hp[14];
    v[72]=ed->hp[15];
    v[73]=ed->hp[16];
    v[74]=ed->hp[17];
    v[75]=ed->hp[18];
    v[76]=ed->hp[19];
    v[77]=ed->hp[20];
    v[78]=ed->hp[21];
    v[79]=ed->hp[22];
    v[80]=ed->hp[23];
    v[82]=es->Data[5];
    v[575]=1e0/(Power(v[56],2)*v[82]);
    v[577]=-((v[56]*v[56])*(0.5e0-v[82]));
    v[86]=es->Data[4]/(v[56]*v[82]);
    v[572]=-(v[56]*v[86]);
    v[573]=v[56]*(1e0+v[572]/2e0);
    v[84]=1e0+v[572];
    v[83]=v[573]*v[69]+v[57]*v[84]+v[574]*v[86];
    v[87]=v[573]*v[75]+v[63]*v[84]+v[576]*v[86];
    v[88]=v[573]*v[70]+v[58]*v[84]+v[578]*v[86];
    v[89]=v[573]*v[76]+v[64]*v[84]+v[579]*v[86];
    v[90]=v[573]*v[71]+v[59]*v[84]+v[580]*v[86];
    v[91]=v[573]*v[77]+v[65]*v[84]+v[581]*v[86];
    v[92]=v[573]*v[72]+v[60]*v[84]+v[582]*v[86];
    v[93]=v[573]*v[78]+v[66]*v[84]+v[583]*v[86];
    v[94]=v[573]*v[73]+v[61]*v[84]+v[584]*v[86];
    v[95]=v[573]*v[79]+v[67]*v[84]+v[585]*v[86];
    v[96]=v[573]*v[74]+v[62]*v[84]+v[586]*v[86];
    v[97]=v[573]*v[80]+v[68]*v[84]+v[587]*v[86];
    v[98]=v[575]*(-(v[56]*v[57])+v[574]+v[577]*v[69]);
    v[102]=v[575]*(v[576]-v[56]*v[63]+v[577]*v[75]);
    v[103]=v[575]*(v[578]-v[56]*v[58]+v[577]*v[70]);
    v[104]=v[575]*(v[579]-v[56]*v[64]+v[577]*v[76]);
    v[105]=v[575]*(v[580]-v[56]*v[59]+v[577]*v[71]);
    v[106]=v[575]*(v[581]-v[56]*v[65]+v[577]*v[77]);
    v[107]=v[575]*(v[582]-v[56]*v[60]+v[577]*v[72]);
    v[108]=v[575]*(v[583]-v[56]*v[66]+v[577]*v[78]);
    v[109]=v[575]*(v[584]-v[56]*v[61]+v[577]*v[73]);
    v[110]=v[575]*(v[585]-v[56]*v[67]+v[577]*v[79]);
    v[111]=v[575]*(v[586]-v[56]*v[62]+v[577]*v[74]);
    v[112]=v[575]*(v[587]-v[56]*v[68]+v[577]*v[80]);
    ed->ht[0]=v[83];
    ed->ht[1]=v[88];
    ed->ht[2]=v[90];
    ed->ht[3]=v[92];
    ed->ht[4]=v[94];
    ed->ht[5]=v[96];
    ed->ht[6]=v[87];
    ed->ht[7]=v[89];
    ed->ht[8]=v[91];
    ed->ht[9]=v[93];
    ed->ht[10]=v[95];
    ed->ht[11]=v[97];
    ed->ht[12]=v[98];
    ed->ht[13]=v[103];
    ed->ht[14]=v[105];
    ed->ht[15]=v[107];
    ed->ht[16]=v[109];
    ed->ht[17]=v[111];
    ed->ht[18]=v[102];
    ed->ht[19]=v[104];
    ed->ht[20]=v[106];
    ed->ht[21]=v[108];
    ed->ht[22]=v[110];
    ed->ht[23]=v[112];
    for(i114=1;i114<=es->id.NoIntPoints;i114++){
     i116=4*(-1+i114);
     v[115]=es->IntPoints[i116];
     v[144]=4e0*v[115];
     v[139]=-1e0+v[144];
     v[117]=es->IntPoints[1+i116];
     v[143]=4e0*v[117];
     v[140]=-1e0+v[143];
     v[126]=-1e0+v[115]+v[117];
     v[5192]=0e0;
     v[5193]=0e0;
     v[5194]=0e0;
     v[5195]=0e0;
     v[5196]=0e0;
     v[5197]=0e0;
     v[5198]=0e0;
     v[5199]=0e0;
     v[5200]=0e0;
     v[5201]=0e0;
     v[5202]=0e0;
     v[5203]=0e0;
     v[5204]=-v[115];
     v[5205]=-v[117];
     v[5206]=v[126];
     v[146]=-4e0*v[126];
     v[147]=-v[144]+v[146];
     v[145]=-v[143]+v[146];
     v[142]=-1e0+2e0*v[115]+2e0*v[117]+2e0*v[126];
     v[5147]=0e0;
     v[5148]=v[139];
     v[5149]=0e0;
     v[5150]=0e0;
     v[5151]=0e0;
     v[5152]=v[142];
     v[5153]=0e0;
     v[5154]=0e0;
     v[5155]=0e0;
     v[5156]=0e0;
     v[5157]=0e0;
     v[5158]=v[147];
     v[5159]=0e0;
     v[5160]=0e0;
     v[5161]=0e0;
     v[5117]=0e0;
     v[5118]=0e0;
     v[5119]=0e0;
     v[5120]=v[140];
     v[5121]=0e0;
     v[5122]=v[142];
     v[5123]=0e0;
     v[5124]=0e0;
     v[5125]=0e0;
     v[5126]=v[145];
     v[5127]=0e0;
     v[5128]=0e0;
     v[5129]=0e0;
     v[5130]=0e0;
     v[5131]=0e0;
     v[5087]=v[139];
     v[5088]=0e0;
     v[5089]=0e0;
     v[5090]=0e0;
     v[5091]=v[142];
     v[5092]=0e0;
     v[5093]=0e0;
     v[5094]=0e0;
     v[5095]=0e0;
     v[5096]=0e0;
     v[5097]=v[147];
     v[5098]=0e0;
     v[5099]=0e0;
     v[5100]=0e0;
     v[5101]=0e0;
     v[5057]=0e0;
     v[5058]=0e0;
     v[5059]=v[140];
     v[5060]=0e0;
     v[5061]=v[142];
     v[5062]=0e0;
     v[5063]=0e0;
     v[5064]=0e0;
     v[5065]=v[145];
     v[5066]=0e0;
     v[5067]=0e0;
     v[5068]=0e0;
     v[5069]=0e0;
     v[5070]=0e0;
     v[5071]=0e0;
     v[171]=v[142]*v[91];
     v[168]=v[142]*v[90];
     v[160]=v[142]*v[24];
     v[161]=v[160]+v[140]*v[22]+v[145]*v[28]+v[144]*(v[26]-v[30]);
     v[159]=v[160]+v[139]*v[20]+v[143]*(v[26]-v[28])+v[147]*v[30];
     v[157]=v[142]*v[23];
     v[158]=v[157]+v[140]*v[21]+v[145]*v[27]+v[144]*(v[25]-v[29]);
     v[156]=v[157]+v[139]*v[19]+v[143]*(v[25]-v[27])+v[147]*v[29];
     v[152]=v[142]*v[6];
     v[153]=v[10]*v[145]+v[152]+v[140]*v[4]+v[144]*(-v[12]+v[8]);
     v[151]=v[12]*v[147]+v[152]+v[139]*v[2]+v[143]*(-v[10]+v[8]);
     v[149]=v[142]*v[5];
     v[150]=v[149]+v[140]*v[3]+v[144]*(-v[11]+v[7])+v[145]*v[9];
     v[148]=v[1]*v[139]+v[11]*v[147]+v[149]+v[143]*(v[7]-v[9]);
     v[162]=-(v[150]*v[151])+v[148]*v[153];
     v[610]=-(v[150]/v[162]);
     v[614]=v[147]*v[610];
     v[609]=v[148]/v[162];
     v[612]=v[145]*v[609];
     v[608]=v[153]/v[162];
     v[613]=v[147]*v[608];
     v[607]=-(v[151]/v[162]);
     v[611]=v[145]*v[607];
     v[589]=v[144]/v[162];
     v[588]=v[143]/v[162];
     v[292]=v[150]*v[588];
     v[291]=v[148]*v[589];
     v[288]=v[153]*v[588];
     v[287]=v[151]*v[589];
     v[155]=es->IntPoints[3+i116]*fabs(v[162]);
     v[163]=(v[153]*v[156]-v[151]*v[158])/v[162];
     v[164]=(-(v[150]*v[156])+v[148]*v[158])/v[162];
     v[165]=(v[153]*v[159]-v[151]*v[161])/v[162];
     v[166]=(-(v[150]*v[159])+v[148]*v[161])/v[162];
     v[190]=1e0-v[163];
     v[191]=1e0-v[166];
     v[195]=0.5e0*(-1e0+(v[165]*v[165])+(v[190]*v[190]));
     v[200]=0.5e0*(-1e0+(v[164]*v[164])+(v[191]*v[191]));
     v[591]=-(v[115]*v[31])-v[117]*v[32]+v[126]*v[33]+(v[195]+v[200])*v[51];
     v[206]=1e0-(1e0+v[163]+v[166])*v[54];
     v[590]=v[55]/(v[162]*v[206]);
     v[604]=v[206]*v[590];
     v[222]=2e0*v[195]*v[53]+v[591];
     v[223]=2e0*v[200]*v[53]+v[591];
     v[226]=(-(v[151]*(v[168]+v[140]*v[88]+v[144]*v[92]+v[145]*v[94]-v[144]*v[96]))+v[153]*(v[168]
      +v[139]*v[83]+v[143]*v[92]-v[143]*v[94]+v[147]*v[96])+v[148]*(v[171]+v[140]*v[89]+v[144]*v[93]
      +v[145]*v[95]-v[144]*v[97])-v[150]*(v[171]+v[139]*v[87]+v[143]*v[93]-v[143]*v[95]+v[147]*v[97]))
      /v[162];
     v[228]=(-(v[153]*v[178])+v[151]*v[179])*v[206]*v[590];
     v[229]=(v[150]*v[178]-v[148]*v[179])*v[206]*v[590];
     v[236]=-1e0*(v[164]*v[190]+v[165]*v[191])*v[53];
     v[237]=(v[153]*v[228]-v[150]*v[229])/v[162];
     v[238]=(-(v[151]*v[228])+v[148]*v[229])/v[162];
     v[239]=(-(v[150]*v[223])+v[153]*v[236])/v[162];
     v[245]=v[143]*v[239];
     v[240]=(v[148]*v[223]-v[151]*v[236])/v[162];
     v[246]=v[144]*v[240];
     v[241]=(v[153]*v[222]-v[150]*v[236])/v[162];
     v[243]=v[143]*v[241];
     v[242]=(-(v[151]*v[222])+v[148]*v[236])/v[162];
     v[244]=v[144]*v[242];
     v[5023]=v[139]*v[241];
     v[5024]=v[139]*v[239];
     v[5025]=v[140]*v[242];
     v[5026]=v[140]*v[240];
     v[5027]=v[142]*(v[241]+v[242]);
     v[5028]=v[142]*(v[239]+v[240]);
     v[5029]=v[243]+v[244];
     v[5030]=v[245]+v[246];
     v[5031]=v[145]*v[242]-v[243];
     v[5032]=v[145]*v[240]-v[245];
     v[5033]=v[147]*v[241]-v[244];
     v[5034]=v[147]*v[239]-v[246];
     v[5035]=-(v[115]*v[226])+v[237];
     v[5036]=-(v[117]*v[226])+v[238];
     v[5037]=v[126]*v[226]-v[237]-v[238];
     for(i233=1;i233<=15;i233++){
      v[253]=v[5161+i233];
      v[254]=v[5176+i233];
      v[595]=v[5191+i233]*v[86];
      v[286]=v[142]*v[595];
      v[285]=v[595]/v[162];
      v[256]=v[144]*v[5041+i233]+v[5056+i233];
      v[257]=v[143]*v[5071+i233]+v[5086+i233];
      v[258]=(-(v[151]*v[256])+v[153]*v[257])/v[162];
      v[259]=v[144]*v[5101+i233]+v[5116+i233];
      v[260]=v[143]*v[5131+i233]+v[5146+i233];
      v[261]=(v[148]*v[259]-v[150]*v[260])/v[162];
      v[269]=((v[148]*v[253]-v[150]*v[254])*v[604])/v[162];
      v[270]=((-(v[151]*v[253])+v[153]*v[254])*v[604])/v[162];
      v[264]=(2e0*(v[148]*v[256]-v[150]*v[257]-v[151]*v[259]+v[153]*v[260])*v[53])/v[162];
      v[606]=0.5e0*v[264];
      v[605]=0.5e0*v[264];
      v[268]=v[150]*v[269]-v[153]*v[270];
      v[271]=-(v[148]*v[269])+v[151]*v[270];
      v[272]=v[258]+v[261];
      v[274]=v[272]*v[51];
      v[273]=v[274]+2e0*v[261]*v[53];
      v[275]=v[274]+2e0*v[258]*v[53];
      v[276]=1e0*v[165]*v[275]-v[191]*v[605];
      v[277]=1e0*v[164]*v[273]-v[190]*v[606];
      v[278]=-1e0*v[191]*v[273]+v[165]*v[605];
      v[280]=-1e0*v[190]*v[275]+v[164]*v[606];
      v[281]=(v[153]*v[276]-v[150]*v[278])/v[162];
      v[293]=v[143]*v[281];
      v[282]=(-(v[151]*v[276])+v[148]*v[278])/v[162];
      v[294]=v[144]*v[282];
      v[283]=(-(v[150]*v[277])+v[153]*v[280])/v[162];
      v[289]=v[143]*v[283];
      v[284]=(v[148]*v[277]-v[151]*v[280])/v[162];
      v[290]=v[144]*v[284];
      v[5207]=v[139]*(v[283]+v[153]*v[285]);
      v[5208]=v[139]*(v[281]-v[150]*v[285]);
      v[5209]=v[140]*(v[284]-v[151]*v[285]);
      v[5210]=v[140]*(v[282]+v[148]*v[285]);
      v[5211]=v[142]*(v[283]+v[284])+v[286]*(v[607]+v[608]);
      v[5212]=v[142]*(v[281]+v[282])+v[286]*(v[609]+v[610]);
      v[5213]=v[289]+v[290]+(-v[287]+v[288])*v[595];
      v[5214]=v[293]+v[294]+(v[291]-v[292])*v[595];
      v[5215]=v[145]*v[284]-v[289]+v[595]*(-v[288]+v[611]);
      v[5216]=v[145]*v[282]-v[293]+v[595]*(v[292]+v[612]);
      v[5217]=v[147]*v[283]-v[290]+v[595]*(v[287]+v[613]);
      v[5218]=v[147]*v[281]-v[294]+v[595]*(-v[291]+v[614]);
      v[5219]=v[268]-v[115]*v[272];
      v[5220]=v[271]-v[117]*v[272];
      v[5221]=-v[268]-v[271]+v[126]*v[272];
      p[i233-1]+=v[155]*v[5022+i233];
      for(i250=1;i250<=15;i250++){
       s[i233-1][i250-1]+=v[155]*v[5206+i250];
      };/* end for */
     };/* end for */
    };/* end for */
    if(idata[ID_CurrentElement]==1e0){
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","ElementNumber: ",(double)idata[ID_CurrentElement]
      ,"   Time: ",(double)rdata[RD_Time],"   TimeSteps: ",(double)idata[ID_Step],"   IterationSteps: ",
      (double)idata[ID_Iteration]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g ","Emodul: ",(double)v[49],"   Poissonsratio: ",(double)v[50]
      ,"   InitialSolidVolumeFraction: ",(double)v[54]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g ","TimeIncrement :",(double)rdata[RD_TimeIncrement]
      ,"   LoadIncrement: ",(double)rdata[RD_MultiplierIncrement]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[0],"  CoorX: ",(double
      )nd[0]->X[0],"  CoorY: ",(double)nd[0]->X[1],"  NumberDOF: ",(double)nd[0]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[0]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[0]->DOF[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[1],"  CoorX: ",(double
      )nd[1]->X[0],"  CoorY: ",(double)nd[1]->X[1],"  NumberDOF: ",(double)nd[1]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[1]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[1]->DOF[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[2],"  CoorX: ",(double
      )nd[2]->X[0],"  CoorY: ",(double)nd[2]->X[1],"  NumberDOF: ",(double)nd[2]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[2]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[2]->DOF[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[3],"  CoorX: ",(double
      )nd[3]->X[0],"  CoorY: ",(double)nd[3]->X[1],"  NumberDOF: ",(double)nd[3]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[3]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[3]->DOF[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[4],"  CoorX: ",(double
      )nd[4]->X[0],"  CoorY: ",(double)nd[4]->X[1],"  NumberDOF: ",(double)nd[4]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[4]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[4]->DOF[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[5],"  CoorX: ",(double
      )nd[5]->X[0],"  CoorY: ",(double)nd[5]->X[1],"  NumberDOF: ",(double)nd[5]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[5]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[5]->DOF[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[6],"  CoorX: ",(double
      )nd[6]->X[0],"  CoorY: ",(double)nd[6]->X[1],"  NumberDOF: ",(double)nd[6]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[6]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[7],"  CoorX: ",(double
      )nd[7]->X[0],"  CoorY: ",(double)nd[7]->X[1],"  NumberDOF: ",(double)nd[7]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[7]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[8],"  CoorX: ",(double
      )nd[8]->X[0],"  CoorY: ",(double)nd[8]->X[1],"  NumberDOF: ",(double)nd[8]->id.NoDOF);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g ","DOFposition: ",(double)nd[8]->DOF[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g "
      ,"hp or h1 field: ",(double)v[57],(double)v[58],(double)v[59],(double)v[60],(double)v[61],(double
      )v[62],(double)v[63],(double)v[64],(double)v[65],(double)v[66],(double)v[67],(double)v[68],(double
      )v[69],(double)v[70],(double)v[71],(double)v[72],(double)v[73],(double)v[74],(double)v[75],(double
      )v[76],(double)v[77],(double)v[78],(double)v[79],(double)v[80]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g "
      ,"ht or h2 field: ",(double)v[83],(double)v[88],(double)v[90],(double)v[92],(double)v[94],(double
      )v[96],(double)v[87],(double)v[89],(double)v[91],(double)v[93],(double)v[95],(double)v[97],(double
      )v[98],(double)v[103],(double)v[105],(double)v[107],(double)v[109],(double)v[111],(double)v[102],
      (double)v[104],(double)v[106],(double)v[108],(double)v[110],(double)v[112]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g ","ap or up field: ",(double
      )v[34],(double)v[35],(double)v[36],(double)v[37],(double)v[38],(double)v[39],(double)v[40],(double
      )v[41],(double)v[42],(double)v[43],(double)v[44],(double)v[45],(double)nd[6]->ap[0],(double)nd[7]
      ->ap[0],(double)nd[8]->ap[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %g %g %g %g %g %g %g %g %g %g %g %g %g %g ","at or ul field: ",(double
      )v[19],(double)v[20],(double)v[21],(double)v[22],(double)v[23],(double)v[24],(double)v[25],(double
      )v[26],(double)v[27],(double)v[28],(double)v[29],(double)v[30],(double)v[31],(double)v[32],(double
      )v[33]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[0],"  Ux: ",(double)nd[0]
      ->at[0],"  Uy: ",(double)nd[0]->at[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[1],"  Ux: ",(double)nd[1]
      ->at[0],"  Uy: ",(double)nd[1]->at[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[2],"  Ux: ",(double)nd[2]
      ->at[0],"  Uy: ",(double)nd[2]->at[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[3],"  Ux: ",(double)nd[3]
      ->at[0],"  Uy: ",(double)nd[3]->at[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[4],"  Ux: ",(double)nd[4]
      ->at[0],"  Uy: ",(double)nd[4]->at[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g %s %g ","Nodes: ",(double)ed->Nodes[5],"  Ux: ",(double)nd[5]
      ->at[0],"  Uy: ",(double)nd[5]->at[1]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g ","Nodes: ",(double)ed->Nodes[6],"  p: ",(double)nd[6]->at[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g ","Nodes: ",(double)ed->Nodes[7],"  p: ",(double)nd[7]->at[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s %g %s %g ","Nodes: ",(double)ed->Nodes[8],"  p: ",(double)nd[8]->at[0]);
     fclose(SMSFile);};};
     ++idata[ID_NoMessages];
     if(1){SMSFile=fopen("myoutput.dat","a");if(SMSFile!=NULL){
     fprintf(SMSFile,"\n%s ","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
     fclose(SMSFile);};};
    } else {
    };
};


// Added 07.09.2020 CH
template <class SC, class LO, class GO, class NO>
void FE<SC,LO,GO,NO>::SKR_Biot3D(double* v, ElementSpec *es, ElementData *ed, NodeSpec **ns, NodeData **nd, double *rdata, int *idata, double *p, double **s)
{
    int i254,i256,i438,i455;
    v[1514]=0e0;
    v[1515]=0e0;
    v[1516]=0e0;
    v[1517]=0e0;
    v[1518]=0e0;
    v[1519]=0e0;
    v[1520]=0e0;
    v[1521]=0e0;
    v[1522]=0e0;
    v[1523]=0e0;
    v[1524]=0e0;
    v[1525]=0e0;
    v[1526]=0e0;
    v[1527]=0e0;
    v[1528]=0e0;
    v[1529]=0e0;
    v[1530]=0e0;
    v[1531]=0e0;
    v[1532]=0e0;
    v[1533]=0e0;
    v[1534]=0e0;
    v[1535]=0e0;
    v[1536]=0e0;
    v[1537]=0e0;
    v[1538]=0e0;
    v[1539]=0e0;
    v[1540]=0e0;
    v[1541]=0e0;
    v[1542]=0e0;
    v[1543]=0e0;
    v[1544]=1e0;
    v[1545]=0e0;
    v[1546]=0e0;
    v[1547]=-1e0;
    v[1480]=0e0;
    v[1481]=0e0;
    v[1482]=0e0;
    v[1483]=0e0;
    v[1484]=0e0;
    v[1485]=0e0;
    v[1486]=0e0;
    v[1487]=0e0;
    v[1488]=0e0;
    v[1489]=0e0;
    v[1490]=0e0;
    v[1491]=0e0;
    v[1492]=0e0;
    v[1493]=0e0;
    v[1494]=0e0;
    v[1495]=0e0;
    v[1496]=0e0;
    v[1497]=0e0;
    v[1498]=0e0;
    v[1499]=0e0;
    v[1500]=0e0;
    v[1501]=0e0;
    v[1502]=0e0;
    v[1503]=0e0;
    v[1504]=0e0;
    v[1505]=0e0;
    v[1506]=0e0;
    v[1507]=0e0;
    v[1508]=0e0;
    v[1509]=0e0;
    v[1510]=0e0;
    v[1511]=1e0;
    v[1512]=0e0;
    v[1513]=-1e0;
    v[1446]=0e0;
    v[1447]=0e0;
    v[1448]=0e0;
    v[1449]=0e0;
    v[1450]=0e0;
    v[1451]=0e0;
    v[1452]=0e0;
    v[1453]=0e0;
    v[1454]=0e0;
    v[1455]=0e0;
    v[1456]=0e0;
    v[1457]=0e0;
    v[1458]=0e0;
    v[1459]=0e0;
    v[1460]=0e0;
    v[1461]=0e0;
    v[1462]=0e0;
    v[1463]=0e0;
    v[1464]=0e0;
    v[1465]=0e0;
    v[1466]=0e0;
    v[1467]=0e0;
    v[1468]=0e0;
    v[1469]=0e0;
    v[1470]=0e0;
    v[1471]=0e0;
    v[1472]=0e0;
    v[1473]=0e0;
    v[1474]=0e0;
    v[1475]=0e0;
    v[1476]=0e0;
    v[1477]=0e0;
    v[1478]=1e0;
    v[1479]=-1e0;
    v[1]=nd[0]->X[0];
    v[2]=nd[0]->X[1];
    v[3]=nd[0]->X[2];
    v[4]=nd[1]->X[0];
    v[5]=nd[1]->X[1];
    v[6]=nd[1]->X[2];
    v[7]=nd[2]->X[0];
    v[8]=nd[2]->X[1];
    v[9]=nd[2]->X[2];
    v[10]=nd[3]->X[0];
    v[11]=nd[3]->X[1];
    v[12]=nd[3]->X[2];
    v[13]=nd[4]->X[0];
    v[14]=nd[4]->X[1];
    v[15]=nd[4]->X[2];
    v[16]=nd[5]->X[0];
    v[17]=nd[5]->X[1];
    v[18]=nd[5]->X[2];
    v[19]=nd[6]->X[0];
    v[20]=nd[6]->X[1];
    v[21]=nd[6]->X[2];
    v[22]=nd[7]->X[0];
    v[23]=nd[7]->X[1];
    v[24]=nd[7]->X[2];
    v[25]=nd[8]->X[0];
    v[26]=nd[8]->X[1];
    v[27]=nd[8]->X[2];
    v[28]=nd[9]->X[0];
    v[29]=nd[9]->X[1];
    v[30]=nd[9]->X[2];
    v[43]=nd[0]->at[0];
    v[44]=nd[0]->at[1];
    v[45]=nd[0]->at[2];
    v[46]=nd[1]->at[0];
    v[47]=nd[1]->at[1];
    v[48]=nd[1]->at[2];
    v[49]=nd[2]->at[0];
    v[50]=nd[2]->at[1];
    v[51]=nd[2]->at[2];
    v[52]=nd[3]->at[0];
    v[53]=nd[3]->at[1];
    v[54]=nd[3]->at[2];
    v[55]=nd[4]->at[0];
    v[56]=nd[4]->at[1];
    v[57]=nd[4]->at[2];
    v[58]=nd[5]->at[0];
    v[59]=nd[5]->at[1];
    v[60]=nd[5]->at[2];
    v[61]=nd[6]->at[0];
    v[62]=nd[6]->at[1];
    v[63]=nd[6]->at[2];
    v[64]=nd[7]->at[0];
    v[65]=nd[7]->at[1];
    v[66]=nd[7]->at[2];
    v[67]=nd[8]->at[0];
    v[68]=nd[8]->at[1];
    v[69]=nd[8]->at[2];
    v[70]=nd[9]->at[0];
    v[71]=nd[9]->at[1];
    v[72]=nd[9]->at[2];
    v[73]=nd[10]->at[0];
    v[74]=nd[11]->at[0];
    v[75]=nd[12]->at[0];
    v[76]=nd[13]->at[0];
    v[388]=v[75]-v[76];
    v[387]=v[74]-v[76];
    v[386]=v[73]-v[76];
    v[112]=es->Data[1];
    v[962]=es->Data[0]/(1e0+v[112]);
    v[113]=(v[112]*v[962])/(1e0-2e0*v[112]);
    v[115]=v[962]/2e0;
    v[116]=es->Data[2];
    v[117]=es->Data[3];
    v[118]=es->Data[4];
    v[119]=es->Data[5];
    v[121]=es->Data[7];
    v[122]=es->Data[8];
    v[1012]=v[121]-v[122];
    v[971]=es->Data[6]/(es->Data[9]*v[122]);
    v[433]=-(v[122]*v[971]);
    v[995]=v[118]*v[433];
    v[994]=v[117]*v[433];
    v[993]=v[116]*v[433];
    v[963]=-(es->Data[10]/es->Data[11]);
    v[190]=1e0+v[963];
    v[127]=rdata[RD_TimeIncrement];
    v[964]=v[127]*(1e0+v[963]/2e0);
    v[189]=-(v[963]/v[127]);
    v[188]=ed->hp[0]*v[190]+v[189]*(-nd[0]->ap[0]+v[43])+ed->hp[30]*v[964];
    v[192]=ed->hp[10]*v[190]+v[189]*(-nd[0]->ap[1]+v[44])+ed->hp[40]*v[964];
    v[193]=ed->hp[20]*v[190]+v[189]*(-nd[0]->ap[2]+v[45])+ed->hp[50]*v[964];
    v[194]=ed->hp[1]*v[190]+v[189]*(-nd[1]->ap[0]+v[46])+ed->hp[31]*v[964];
    v[195]=ed->hp[11]*v[190]+v[189]*(-nd[1]->ap[1]+v[47])+ed->hp[41]*v[964];
    v[196]=ed->hp[21]*v[190]+v[189]*(-nd[1]->ap[2]+v[48])+ed->hp[51]*v[964];
    v[197]=ed->hp[2]*v[190]+v[189]*(-nd[2]->ap[0]+v[49])+ed->hp[32]*v[964];
    v[198]=ed->hp[12]*v[190]+v[189]*(-nd[2]->ap[1]+v[50])+ed->hp[42]*v[964];
    v[199]=ed->hp[22]*v[190]+v[189]*(-nd[2]->ap[2]+v[51])+ed->hp[52]*v[964];
    v[200]=ed->hp[3]*v[190]+v[189]*(-nd[3]->ap[0]+v[52])+ed->hp[33]*v[964];
    v[201]=ed->hp[13]*v[190]+v[189]*(-nd[3]->ap[1]+v[53])+ed->hp[43]*v[964];
    v[202]=ed->hp[23]*v[190]+v[189]*(-nd[3]->ap[2]+v[54])+ed->hp[53]*v[964];
    v[203]=ed->hp[4]*v[190]+v[189]*(-nd[4]->ap[0]+v[55])+ed->hp[34]*v[964];
    v[204]=ed->hp[14]*v[190]+v[189]*(-nd[4]->ap[1]+v[56])+ed->hp[44]*v[964];
    v[205]=ed->hp[24]*v[190]+v[189]*(-nd[4]->ap[2]+v[57])+ed->hp[54]*v[964];
    v[206]=ed->hp[5]*v[190]+v[189]*(-nd[5]->ap[0]+v[58])+ed->hp[35]*v[964];
    v[207]=ed->hp[15]*v[190]+v[189]*(-nd[5]->ap[1]+v[59])+ed->hp[45]*v[964];
    v[208]=ed->hp[25]*v[190]+v[189]*(-nd[5]->ap[2]+v[60])+ed->hp[55]*v[964];
    v[209]=ed->hp[6]*v[190]+v[189]*(-nd[6]->ap[0]+v[61])+ed->hp[36]*v[964];
    v[210]=ed->hp[16]*v[190]+v[189]*(-nd[6]->ap[1]+v[62])+ed->hp[46]*v[964];
    v[211]=ed->hp[26]*v[190]+v[189]*(-nd[6]->ap[2]+v[63])+ed->hp[56]*v[964];
    v[212]=ed->hp[7]*v[190]+v[189]*(-nd[7]->ap[0]+v[64])+ed->hp[37]*v[964];
    v[213]=ed->hp[17]*v[190]+v[189]*(-nd[7]->ap[1]+v[65])+ed->hp[47]*v[964];
    v[214]=ed->hp[27]*v[190]+v[189]*(-nd[7]->ap[2]+v[66])+ed->hp[57]*v[964];
    v[215]=ed->hp[8]*v[190]+v[189]*(-nd[8]->ap[0]+v[67])+ed->hp[38]*v[964];
    v[216]=ed->hp[18]*v[190]+v[189]*(-nd[8]->ap[1]+v[68])+ed->hp[48]*v[964];
    v[217]=ed->hp[28]*v[190]+v[189]*(-nd[8]->ap[2]+v[69])+ed->hp[58]*v[964];
    v[218]=ed->hp[9]*v[190]+v[189]*(-nd[9]->ap[0]+v[70])+ed->hp[39]*v[964];
    v[219]=ed->hp[19]*v[190]+v[189]*(-nd[9]->ap[1]+v[71])+ed->hp[49]*v[964];
    v[220]=ed->hp[29]*v[190]+v[189]*(-nd[9]->ap[2]+v[72])+ed->hp[59]*v[964];
    for(i254=1;i254<=es->id.NoIntPoints;i254++){
     i256=4*(-1+i254);
     v[255]=es->IntPoints[i256];
     v[286]=4e0*v[255];
     v[374]=-(v[214]*v[286]);
     v[367]=-(v[213]*v[286]);
     v[360]=-(v[212]*v[286]);
     v[281]=-1e0+v[286];
     v[257]=es->IntPoints[1+i256];
     v[285]=4e0*v[257];
     v[333]=-(v[285]*v[69]);
     v[326]=-(v[285]*v[68]);
     v[319]=-(v[285]*v[67]);
     v[310]=-(v[27]*v[285]);
     v[303]=-(v[26]*v[285]);
     v[296]=-(v[25]*v[285]);
     v[282]=-1e0+v[285];
     v[258]=es->IntPoints[2+i256];
     v[287]=4e0*v[258];
     v[371]=-(v[220]*v[287]);
     v[364]=-(v[219]*v[287]);
     v[357]=-(v[218]*v[287]);
     v[331]=-(v[287]*v[72]);
     v[324]=-(v[287]*v[71]);
     v[317]=-(v[287]*v[70]);
     v[308]=-(v[287]*v[30]);
     v[301]=-(v[287]*v[29]);
     v[294]=-(v[28]*v[287]);
     v[283]=-1e0+v[287];
     v[260]=v[255]*(-1e0+2e0*v[255]);
     v[261]=v[257]*(-1e0+2e0*v[257]);
     v[262]=v[258]*(-1e0+2e0*v[258]);
     v[263]=1e0-v[255]-v[257]-v[258];
     v[1548]=0e0;
     v[1549]=0e0;
     v[1550]=0e0;
     v[1551]=0e0;
     v[1552]=0e0;
     v[1553]=0e0;
     v[1554]=0e0;
     v[1555]=0e0;
     v[1556]=0e0;
     v[1557]=0e0;
     v[1558]=0e0;
     v[1559]=0e0;
     v[1560]=0e0;
     v[1561]=0e0;
     v[1562]=0e0;
     v[1563]=0e0;
     v[1564]=0e0;
     v[1565]=0e0;
     v[1566]=0e0;
     v[1567]=0e0;
     v[1568]=0e0;
     v[1569]=0e0;
     v[1570]=0e0;
     v[1571]=0e0;
     v[1572]=0e0;
     v[1573]=0e0;
     v[1574]=0e0;
     v[1575]=0e0;
     v[1576]=0e0;
     v[1577]=0e0;
     v[1578]=v[255];
     v[1579]=v[257];
     v[1580]=v[258];
     v[1581]=v[263];
     v[288]=-4e0*v[263];
     v[291]=-v[287]-v[288];
     v[290]=-v[285]-v[288];
     v[289]=-v[286]-v[288];
     v[284]=1e0+v[288];
     v[1412]=0e0;
     v[1413]=0e0;
     v[1414]=v[281];
     v[1415]=0e0;
     v[1416]=0e0;
     v[1417]=0e0;
     v[1418]=0e0;
     v[1419]=0e0;
     v[1420]=0e0;
     v[1421]=0e0;
     v[1422]=0e0;
     v[1423]=v[284];
     v[1424]=0e0;
     v[1425]=0e0;
     v[1426]=v[285];
     v[1427]=0e0;
     v[1428]=0e0;
     v[1429]=0e0;
     v[1430]=0e0;
     v[1431]=0e0;
     v[1432]=v[287];
     v[1433]=0e0;
     v[1434]=0e0;
     v[1435]=v[289];
     v[1436]=0e0;
     v[1437]=0e0;
     v[1438]=-v[285];
     v[1439]=0e0;
     v[1440]=0e0;
     v[1441]=-v[287];
     v[1442]=0e0;
     v[1443]=0e0;
     v[1444]=0e0;
     v[1445]=0e0;
     v[1378]=0e0;
     v[1379]=0e0;
     v[1380]=0e0;
     v[1381]=0e0;
     v[1382]=0e0;
     v[1383]=v[282];
     v[1384]=0e0;
     v[1385]=0e0;
     v[1386]=0e0;
     v[1387]=0e0;
     v[1388]=0e0;
     v[1389]=v[284];
     v[1390]=0e0;
     v[1391]=0e0;
     v[1392]=v[286];
     v[1393]=0e0;
     v[1394]=0e0;
     v[1395]=v[287];
     v[1396]=0e0;
     v[1397]=0e0;
     v[1398]=0e0;
     v[1399]=0e0;
     v[1400]=0e0;
     v[1401]=-v[286];
     v[1402]=0e0;
     v[1403]=0e0;
     v[1404]=v[290];
     v[1405]=0e0;
     v[1406]=0e0;
     v[1407]=-v[287];
     v[1408]=0e0;
     v[1409]=0e0;
     v[1410]=0e0;
     v[1411]=0e0;
     v[1344]=0e0;
     v[1345]=0e0;
     v[1346]=0e0;
     v[1347]=0e0;
     v[1348]=0e0;
     v[1349]=0e0;
     v[1350]=0e0;
     v[1351]=0e0;
     v[1352]=v[283];
     v[1353]=0e0;
     v[1354]=0e0;
     v[1355]=v[284];
     v[1356]=0e0;
     v[1357]=0e0;
     v[1358]=0e0;
     v[1359]=0e0;
     v[1360]=0e0;
     v[1361]=v[285];
     v[1362]=0e0;
     v[1363]=0e0;
     v[1364]=v[286];
     v[1365]=0e0;
     v[1366]=0e0;
     v[1367]=-v[286];
     v[1368]=0e0;
     v[1369]=0e0;
     v[1370]=-v[285];
     v[1371]=0e0;
     v[1372]=0e0;
     v[1373]=v[291];
     v[1374]=0e0;
     v[1375]=0e0;
     v[1376]=0e0;
     v[1377]=0e0;
     v[1310]=0e0;
     v[1311]=v[281];
     v[1312]=0e0;
     v[1313]=0e0;
     v[1314]=0e0;
     v[1315]=0e0;
     v[1316]=0e0;
     v[1317]=0e0;
     v[1318]=0e0;
     v[1319]=0e0;
     v[1320]=v[284];
     v[1321]=0e0;
     v[1322]=0e0;
     v[1323]=v[285];
     v[1324]=0e0;
     v[1325]=0e0;
     v[1326]=0e0;
     v[1327]=0e0;
     v[1328]=0e0;
     v[1329]=v[287];
     v[1330]=0e0;
     v[1331]=0e0;
     v[1332]=v[289];
     v[1333]=0e0;
     v[1334]=0e0;
     v[1335]=-v[285];
     v[1336]=0e0;
     v[1337]=0e0;
     v[1338]=-v[287];
     v[1339]=0e0;
     v[1340]=0e0;
     v[1341]=0e0;
     v[1342]=0e0;
     v[1343]=0e0;
     v[1276]=0e0;
     v[1277]=0e0;
     v[1278]=0e0;
     v[1279]=0e0;
     v[1280]=v[282];
     v[1281]=0e0;
     v[1282]=0e0;
     v[1283]=0e0;
     v[1284]=0e0;
     v[1285]=0e0;
     v[1286]=v[284];
     v[1287]=0e0;
     v[1288]=0e0;
     v[1289]=v[286];
     v[1290]=0e0;
     v[1291]=0e0;
     v[1292]=v[287];
     v[1293]=0e0;
     v[1294]=0e0;
     v[1295]=0e0;
     v[1296]=0e0;
     v[1297]=0e0;
     v[1298]=-v[286];
     v[1299]=0e0;
     v[1300]=0e0;
     v[1301]=v[290];
     v[1302]=0e0;
     v[1303]=0e0;
     v[1304]=-v[287];
     v[1305]=0e0;
     v[1306]=0e0;
     v[1307]=0e0;
     v[1308]=0e0;
     v[1309]=0e0;
     v[1242]=0e0;
     v[1243]=0e0;
     v[1244]=0e0;
     v[1245]=0e0;
     v[1246]=0e0;
     v[1247]=0e0;
     v[1248]=0e0;
     v[1249]=v[283];
     v[1250]=0e0;
     v[1251]=0e0;
     v[1252]=v[284];
     v[1253]=0e0;
     v[1254]=0e0;
     v[1255]=0e0;
     v[1256]=0e0;
     v[1257]=0e0;
     v[1258]=v[285];
     v[1259]=0e0;
     v[1260]=0e0;
     v[1261]=v[286];
     v[1262]=0e0;
     v[1263]=0e0;
     v[1264]=-v[286];
     v[1265]=0e0;
     v[1266]=0e0;
     v[1267]=-v[285];
     v[1268]=0e0;
     v[1269]=0e0;
     v[1270]=v[291];
     v[1271]=0e0;
     v[1272]=0e0;
     v[1273]=0e0;
     v[1274]=0e0;
     v[1275]=0e0;
     v[1208]=v[281];
     v[1209]=0e0;
     v[1210]=0e0;
     v[1211]=0e0;
     v[1212]=0e0;
     v[1213]=0e0;
     v[1214]=0e0;
     v[1215]=0e0;
     v[1216]=0e0;
     v[1217]=v[284];
     v[1218]=0e0;
     v[1219]=0e0;
     v[1220]=v[285];
     v[1221]=0e0;
     v[1222]=0e0;
     v[1223]=0e0;
     v[1224]=0e0;
     v[1225]=0e0;
     v[1226]=v[287];
     v[1227]=0e0;
     v[1228]=0e0;
     v[1229]=v[289];
     v[1230]=0e0;
     v[1231]=0e0;
     v[1232]=-v[285];
     v[1233]=0e0;
     v[1234]=0e0;
     v[1235]=-v[287];
     v[1236]=0e0;
     v[1237]=0e0;
     v[1238]=0e0;
     v[1239]=0e0;
     v[1240]=0e0;
     v[1241]=0e0;
     v[1174]=0e0;
     v[1175]=0e0;
     v[1176]=0e0;
     v[1177]=v[282];
     v[1178]=0e0;
     v[1179]=0e0;
     v[1180]=0e0;
     v[1181]=0e0;
     v[1182]=0e0;
     v[1183]=v[284];
     v[1184]=0e0;
     v[1185]=0e0;
     v[1186]=v[286];
     v[1187]=0e0;
     v[1188]=0e0;
     v[1189]=v[287];
     v[1190]=0e0;
     v[1191]=0e0;
     v[1192]=0e0;
     v[1193]=0e0;
     v[1194]=0e0;
     v[1195]=-v[286];
     v[1196]=0e0;
     v[1197]=0e0;
     v[1198]=v[290];
     v[1199]=0e0;
     v[1200]=0e0;
     v[1201]=-v[287];
     v[1202]=0e0;
     v[1203]=0e0;
     v[1204]=0e0;
     v[1205]=0e0;
     v[1206]=0e0;
     v[1207]=0e0;
     v[1140]=0e0;
     v[1141]=0e0;
     v[1142]=0e0;
     v[1143]=0e0;
     v[1144]=0e0;
     v[1145]=0e0;
     v[1146]=v[283];
     v[1147]=0e0;
     v[1148]=0e0;
     v[1149]=v[284];
     v[1150]=0e0;
     v[1151]=0e0;
     v[1152]=0e0;
     v[1153]=0e0;
     v[1154]=0e0;
     v[1155]=v[285];
     v[1156]=0e0;
     v[1157]=0e0;
     v[1158]=v[286];
     v[1159]=0e0;
     v[1160]=0e0;
     v[1161]=-v[286];
     v[1162]=0e0;
     v[1163]=0e0;
     v[1164]=-v[285];
     v[1165]=0e0;
     v[1166]=0e0;
     v[1167]=v[291];
     v[1168]=0e0;
     v[1169]=0e0;
     v[1170]=0e0;
     v[1171]=0e0;
     v[1172]=0e0;
     v[1173]=0e0;
     v[370]=v[202]*v[284];
     v[977]=-(v[217]*v[285])+v[370];
     v[363]=v[201]*v[284];
     v[976]=-(v[216]*v[285])+v[363];
     v[356]=v[200]*v[284];
     v[975]=-(v[215]*v[285])+v[356];
     v[330]=v[284]*v[54];
     v[965]=v[330]-v[286]*v[66];
     v[335]=v[333]+v[283]*v[51]+v[285]*v[60]+v[286]*v[63]+v[291]*v[72]+v[965];
     v[332]=v[331]+v[282]*v[48]+v[286]*v[57]+v[287]*v[60]+v[290]*v[69]+v[965];
     v[329]=v[330]+v[331]+v[333]+v[281]*v[45]+v[285]*v[57]+v[287]*v[63]+v[289]*v[66];
     v[323]=v[284]*v[53];
     v[966]=v[323]-v[286]*v[65];
     v[328]=v[326]+v[283]*v[50]+v[285]*v[59]+v[286]*v[62]+v[291]*v[71]+v[966];
     v[325]=v[324]+v[282]*v[47]+v[286]*v[56]+v[287]*v[59]+v[290]*v[68]+v[966];
     v[322]=v[323]+v[324]+v[326]+v[281]*v[44]+v[285]*v[56]+v[287]*v[62]+v[289]*v[65];
     v[316]=v[284]*v[52];
     v[967]=v[316]-v[286]*v[64];
     v[321]=v[319]+v[283]*v[49]+v[285]*v[58]+v[286]*v[61]+v[291]*v[70]+v[967];
     v[318]=v[317]+v[282]*v[46]+v[286]*v[55]+v[287]*v[58]+v[290]*v[67]+v[967];
     v[315]=v[316]+v[317]+v[319]+v[281]*v[43]+v[285]*v[55]+v[287]*v[61]+v[289]*v[64];
     v[307]=v[12]*v[284];
     v[968]=-(v[24]*v[286])+v[307];
     v[312]=v[18]*v[285]+v[21]*v[286]+v[291]*v[30]+v[310]+v[283]*v[9]+v[968];
     v[309]=v[15]*v[286]+v[18]*v[287]+v[27]*v[290]+v[308]+v[282]*v[6]+v[968];
     v[306]=v[15]*v[285]+v[21]*v[287]+v[24]*v[289]+v[281]*v[3]+v[307]+v[308]+v[310];
     v[300]=v[11]*v[284];
     v[969]=-(v[23]*v[286])+v[300];
     v[305]=v[17]*v[285]+v[20]*v[286]+v[29]*v[291]+v[303]+v[283]*v[8]+v[969];
     v[302]=v[14]*v[286]+v[17]*v[287]+v[26]*v[290]+v[301]+v[282]*v[5]+v[969];
     v[340]=-(v[305]*v[309])+v[302]*v[312];
     v[299]=v[2]*v[281]+v[14]*v[285]+v[20]*v[287]+v[23]*v[289]+v[300]+v[301]+v[303];
     v[342]=-(v[302]*v[306])+v[299]*v[309];
     v[341]=v[305]*v[306]-v[299]*v[312];
     v[293]=v[10]*v[284];
     v[970]=-(v[22]*v[286])+v[293];
     v[298]=v[16]*v[285]+v[19]*v[286]+v[28]*v[291]+v[296]+v[283]*v[7]+v[970];
     v[295]=v[13]*v[286]+v[16]*v[287]+v[25]*v[290]+v[294]+v[282]*v[4]+v[970];
     v[348]=-(v[298]*v[302])+v[295]*v[305];
     v[344]=v[298]*v[309]-v[295]*v[312];
     v[292]=v[1]*v[281]+v[13]*v[285]+v[19]*v[287]+v[22]*v[289]+v[293]+v[294]+v[296];
     v[350]=-(v[295]*v[299])+v[292]*v[302];
     v[349]=v[298]*v[299]-v[292]*v[305];
     v[346]=v[295]*v[306]-v[292]*v[309];
     v[345]=-(v[298]*v[306])+v[292]*v[312];
     v[336]=v[292]*v[340]+v[295]*v[341]+v[298]*v[342];
     v[981]=v[115]/(v[336]*v[336]);
     v[972]=v[115]/v[336];
     v[480]=v[971]/v[336];
     v[521]=v[350]/v[336];
     v[520]=v[349]/v[336];
     v[1027]=v[520]+v[521];
     v[1021]=v[287]*v[520]+v[285]*v[521];
     v[519]=v[348]/v[336];
     v[1030]=v[519]+v[521];
     v[1024]=v[287]*v[519]+v[286]*v[521];
     v[1018]=v[285]*v[519]+v[286]*v[520];
     v[985]=v[519]+v[520];
     v[1015]=v[521]+v[985];
     v[518]=v[346]/v[336];
     v[517]=v[345]/v[336];
     v[1026]=v[517]+v[518];
     v[1020]=v[287]*v[517]+v[285]*v[518];
     v[516]=v[344]/v[336];
     v[1029]=v[516]+v[518];
     v[1023]=v[287]*v[516]+v[286]*v[518];
     v[1017]=v[285]*v[516]+v[286]*v[517];
     v[984]=v[516]+v[517];
     v[1014]=v[518]+v[984];
     v[515]=v[342]/v[336];
     v[514]=v[341]/v[336];
     v[1025]=v[514]+v[515];
     v[1019]=v[287]*v[514]+v[285]*v[515];
     v[513]=v[340]/v[336];
     v[1028]=v[513]+v[515];
     v[1022]=v[287]*v[513]+v[286]*v[515];
     v[1016]=v[285]*v[513]+v[286]*v[514];
     v[983]=v[513]+v[514];
     v[1013]=v[515]+v[983];
     v[264]=v[263]*(-1e0+2e0*v[263]);
     v[265]=4e0*v[255]*v[257];
     v[266]=4e0*v[257]*v[258];
     v[267]=4e0*v[255]*v[258];
     v[268]=4e0*v[255]*v[263];
     v[269]=4e0*v[257]*v[263];
     v[270]=4e0*v[258]*v[263];
     v[1582]=0e0;
     v[1583]=0e0;
     v[1584]=v[260];
     v[1585]=0e0;
     v[1586]=0e0;
     v[1587]=v[261];
     v[1588]=0e0;
     v[1589]=0e0;
     v[1590]=v[262];
     v[1591]=0e0;
     v[1592]=0e0;
     v[1593]=v[264];
     v[1594]=0e0;
     v[1595]=0e0;
     v[1596]=v[265];
     v[1597]=0e0;
     v[1598]=0e0;
     v[1599]=v[266];
     v[1600]=0e0;
     v[1601]=0e0;
     v[1602]=v[267];
     v[1603]=0e0;
     v[1604]=0e0;
     v[1605]=v[268];
     v[1606]=0e0;
     v[1607]=0e0;
     v[1608]=v[269];
     v[1609]=0e0;
     v[1610]=0e0;
     v[1611]=v[270];
     v[1612]=0e0;
     v[1613]=0e0;
     v[1614]=0e0;
     v[1615]=0e0;
     v[1616]=0e0;
     v[1617]=v[260];
     v[1618]=0e0;
     v[1619]=0e0;
     v[1620]=v[261];
     v[1621]=0e0;
     v[1622]=0e0;
     v[1623]=v[262];
     v[1624]=0e0;
     v[1625]=0e0;
     v[1626]=v[264];
     v[1627]=0e0;
     v[1628]=0e0;
     v[1629]=v[265];
     v[1630]=0e0;
     v[1631]=0e0;
     v[1632]=v[266];
     v[1633]=0e0;
     v[1634]=0e0;
     v[1635]=v[267];
     v[1636]=0e0;
     v[1637]=0e0;
     v[1638]=v[268];
     v[1639]=0e0;
     v[1640]=0e0;
     v[1641]=v[269];
     v[1642]=0e0;
     v[1643]=0e0;
     v[1644]=v[270];
     v[1645]=0e0;
     v[1646]=0e0;
     v[1647]=0e0;
     v[1648]=0e0;
     v[1649]=0e0;
     v[1650]=v[260];
     v[1651]=0e0;
     v[1652]=0e0;
     v[1653]=v[261];
     v[1654]=0e0;
     v[1655]=0e0;
     v[1656]=v[262];
     v[1657]=0e0;
     v[1658]=0e0;
     v[1659]=v[264];
     v[1660]=0e0;
     v[1661]=0e0;
     v[1662]=v[265];
     v[1663]=0e0;
     v[1664]=0e0;
     v[1665]=v[266];
     v[1666]=0e0;
     v[1667]=0e0;
     v[1668]=v[267];
     v[1669]=0e0;
     v[1670]=0e0;
     v[1671]=v[268];
     v[1672]=0e0;
     v[1673]=0e0;
     v[1674]=v[269];
     v[1675]=0e0;
     v[1676]=0e0;
     v[1677]=v[270];
     v[1678]=0e0;
     v[1679]=0e0;
     v[1680]=0e0;
     v[1681]=0e0;
     v[1682]=0e0;
     v[1683]=0e0;
     v[314]=es->IntPoints[3+i256]*fabs(v[336]);
     v[393]=(v[315]*v[340]+v[318]*v[341]+v[321]*v[342])/v[336];
     v[396]=(v[322]*v[344]+v[325]*v[345]+v[328]*v[346])/v[336];
     v[398]=(v[329]*v[348]+v[332]*v[349]+v[335]*v[350])/v[336];
     v[974]=v[393]+v[396]+v[398];
     v[973]=-(v[255]*v[73])-v[257]*v[74]-v[258]*v[75]-v[263]*v[76]+v[113]*v[974];
     v[402]=(v[322]*v[340]+v[325]*v[341]+v[328]*v[342]+v[315]*v[344]+v[318]*v[345]+v[321]*v[346]
      )*v[972];
     v[403]=(v[329]*v[340]+v[332]*v[341]+v[335]*v[342]+v[315]*v[348]+v[318]*v[349]+v[321]*v[350]
      )*v[972];
     v[406]=(v[329]*v[344]+v[332]*v[345]+v[335]*v[346]+v[322]*v[348]+v[325]*v[349]+v[328]*v[350]
      )*v[972];
     v[408]=2e0*v[115]*v[393]+v[973];
     v[409]=2e0*v[115]*v[396]+v[973];
     v[410]=2e0*v[115]*v[398]+v[973];
     v[417]=-(v[119]*(-1e0+v[974]));
     v[426]=v[122]*(-1e0+v[417])-v[121]*v[417];
     v[425]=v[116]*v[426];
     v[427]=v[117]*v[426];
     v[428]=v[118]*v[426];
     v[430]=(v[341]*(v[194]*v[282]+v[203]*v[286]+v[206]*v[287]+v[215]*v[290]+v[356]+v[357]+v[360])
      +v[345]*(v[195]*v[282]+v[204]*v[286]+v[207]*v[287]+v[216]*v[290]+v[363]+v[364]+v[367])+v[349]*
      (v[196]*v[282]+v[205]*v[286]+v[208]*v[287]+v[217]*v[290]+v[370]+v[371]+v[374])+v[340]*
      (v[188]*v[281]+v[203]*v[285]+v[209]*v[287]+v[212]*v[289]+v[357]+v[975])+v[342]*(v[197]*v[283]
      +v[206]*v[285]+v[209]*v[286]+v[218]*v[291]+v[360]+v[975])+v[344]*(v[192]*v[281]+v[204]*v[285]
      +v[210]*v[287]+v[213]*v[289]+v[364]+v[976])+v[346]*(v[198]*v[283]+v[207]*v[285]+v[210]*v[286]
      +v[219]*v[291]+v[367]+v[976])+v[348]*(v[193]*v[281]+v[205]*v[285]+v[211]*v[287]+v[214]*v[289]
      +v[371]+v[977])+v[350]*(v[199]*v[283]+v[208]*v[285]+v[211]*v[286]+v[220]*v[291]+v[374]+v[977]))
      /v[336];
     v[432]=(v[340]*v[386]+v[341]*v[387]+v[342]*v[388])*v[480]+v[993];
     v[434]=(v[344]*v[386]+v[345]*v[387]+v[346]*v[388])*v[480]+v[994];
     v[435]=(v[348]*v[386]+v[349]*v[387]+v[350]*v[388])*v[480]+v[995];
     v[440]=(v[340]*v[432]+v[344]*v[434]+v[348]*v[435])/v[336];
     v[441]=(v[341]*v[432]+v[345]*v[434]+v[349]*v[435])/v[336];
     v[442]=(v[342]*v[432]+v[346]*v[434]+v[350]*v[435])/v[336];
     v[443]=(v[340]*v[403]+v[344]*v[406]+v[348]*v[410])/v[336];
     v[444]=(v[341]*v[403]+v[345]*v[406]+v[349]*v[410])/v[336];
     v[445]=(v[342]*v[403]+v[346]*v[406]+v[350]*v[410])/v[336];
     v[980]=v[444]+v[445];
     v[446]=(v[340]*v[402]+v[348]*v[406]+v[344]*v[409])/v[336];
     v[447]=(v[341]*v[402]+v[349]*v[406]+v[345]*v[409])/v[336];
     v[448]=(v[342]*v[402]+v[350]*v[406]+v[346]*v[409])/v[336];
     v[979]=v[447]+v[448];
     v[449]=(v[344]*v[402]+v[348]*v[403]+v[340]*v[408])/v[336];
     v[450]=(v[345]*v[402]+v[349]*v[403]+v[341]*v[408])/v[336];
     v[451]=(v[346]*v[402]+v[350]*v[403]+v[342]*v[408])/v[336];
     v[978]=v[450]+v[451];
     v[1102]=v[260]*v[425]+v[281]*v[449];
     v[1103]=v[260]*v[427]+v[281]*v[446];
     v[1104]=v[260]*v[428]+v[281]*v[443];
     v[1105]=v[261]*v[425]+v[282]*v[450];
     v[1106]=v[261]*v[427]+v[282]*v[447];
     v[1107]=v[261]*v[428]+v[282]*v[444];
     v[1108]=v[262]*v[425]+v[283]*v[451];
     v[1109]=v[262]*v[427]+v[283]*v[448];
     v[1110]=v[262]*v[428]+v[283]*v[445];
     v[1111]=v[264]*v[425]+v[284]*(v[449]+v[978]);
     v[1112]=v[264]*v[427]+v[284]*(v[446]+v[979]);
     v[1113]=v[264]*v[428]+v[284]*(v[443]+v[980]);
     v[1114]=v[265]*v[425]+v[285]*v[449]+v[286]*v[450];
     v[1115]=v[265]*v[427]+v[285]*v[446]+v[286]*v[447];
     v[1116]=v[265]*v[428]+v[285]*v[443]+v[286]*v[444];
     v[1117]=v[266]*v[425]+v[287]*v[450]+v[285]*v[451];
     v[1118]=v[266]*v[427]+v[287]*v[447]+v[285]*v[448];
     v[1119]=v[266]*v[428]+v[287]*v[444]+v[285]*v[445];
     v[1120]=v[267]*v[425]+v[287]*v[449]+v[286]*v[451];
     v[1121]=v[267]*v[427]+v[287]*v[446]+v[286]*v[448];
     v[1122]=v[267]*v[428]+v[287]*v[443]+v[286]*v[445];
     v[1123]=v[268]*v[425]+v[289]*v[449]-v[286]*v[978];
     v[1124]=v[268]*v[427]+v[289]*v[446]-v[286]*v[979];
     v[1125]=v[268]*v[428]+v[289]*v[443]-v[286]*v[980];
     v[1126]=v[269]*v[425]+v[290]*v[450]-v[285]*(v[449]+v[451]);
     v[1127]=v[269]*v[427]+v[290]*v[447]-v[285]*(v[446]+v[448]);
     v[1128]=v[269]*v[428]+v[290]*v[444]-v[285]*(v[443]+v[445]);
     v[1129]=v[270]*v[425]-v[287]*(v[449]+v[450])+v[291]*v[451];
     v[1130]=v[270]*v[427]-v[287]*(v[446]+v[447])+v[291]*v[448];
     v[1131]=v[270]*v[428]-v[287]*(v[443]+v[444])+v[291]*v[445];
     v[1132]=v[255]*v[430]+v[440];
     v[1133]=v[257]*v[430]+v[441];
     v[1134]=v[258]*v[430]+v[442];
     v[1135]=v[263]*v[430]-v[440]-v[441]-v[442];
     for(i438=1;i438<=34;i438++){
      v[458]=v[1139+i438];
      v[459]=v[1173+i438];
      v[460]=v[1207+i438];
      v[461]=v[1241+i438];
      v[462]=v[1275+i438];
      v[463]=v[1309+i438];
      v[464]=v[1343+i438];
      v[465]=v[1377+i438];
      v[466]=v[1411+i438];
      v[467]=v[1445+i438];
      v[468]=v[1479+i438];
      v[469]=v[1513+i438];
      v[470]=v[1547+i438];
      v[992]=-(v[287]*v[470]);
      v[991]=-(v[285]*v[470]);
      v[988]=-(v[286]*v[470]);
      v[986]=v[189]*v[470];
      v[512]=v[284]*v[986];
      v[511]=v[470]*v[521];
      v[510]=v[470]*v[518];
      v[509]=v[470]*v[515];
      v[508]=v[470]*v[520];
      v[507]=v[470]*v[517];
      v[506]=v[470]*v[514];
      v[505]=v[470]*v[519];
      v[504]=v[470]*v[516];
      v[503]=v[470]*v[513];
      v[471]=(v[342]*v[458]+v[341]*v[459]+v[340]*v[460])/v[336];
      v[472]=(v[346]*v[461]+v[345]*v[462]+v[344]*v[463])/v[336];
      v[497]=(v[346]*v[458]+v[345]*v[459]+v[344]*v[460]+v[342]*v[461]+v[341]*v[462]+v[340]*v[463]
       )*v[981];
      v[474]=(v[350]*v[464]+v[349]*v[465]+v[348]*v[466])/v[336];
      v[492]=(v[350]*v[461]+v[349]*v[462]+v[348]*v[463]+v[346]*v[464]+v[345]*v[465]+v[344]*v[466]
       )*v[981];
      v[493]=(v[350]*v[458]+v[349]*v[459]+v[348]*v[460]+v[342]*v[464]+v[341]*v[465]+v[340]*v[466]
       )*v[981];
      v[477]=(v[350]*v[467]+v[349]*v[468]+v[348]*v[469])/v[336];
      v[478]=(v[346]*v[467]+v[345]*v[468]+v[344]*v[469])/v[336];
      v[479]=(v[342]*v[467]+v[341]*v[468]+v[340]*v[469])/v[336];
      v[481]=(v[348]*v[477]+v[344]*v[478]+v[340]*v[479])*v[480];
      v[482]=(v[349]*v[477]+v[345]*v[478]+v[341]*v[479])*v[480];
      v[483]=(v[350]*v[477]+v[346]*v[478]+v[342]*v[479])*v[480];
      v[485]=v[471]+v[472]+v[474];
      v[982]=v[1012]*v[119]*(v[118]*v[1581+i438]+v[117]*v[1615+i438]+v[116]*v[1649+i438])
       +v[113]*v[485];
      v[486]=2e0*v[115]*v[474]+v[982];
      v[489]=2e0*v[115]*v[472]+v[982];
      v[490]=2e0*v[115]*v[471]+v[982];
      v[491]=v[344]*v[492]+v[340]*v[493]+v[486]*v[519];
      v[494]=v[345]*v[492]+v[341]*v[493]+v[486]*v[520];
      v[495]=v[346]*v[492]+v[342]*v[493]+v[486]*v[521];
      v[990]=v[494]+v[495];
      v[496]=v[348]*v[492]+v[340]*v[497]+v[489]*v[516];
      v[498]=v[349]*v[492]+v[341]*v[497]+v[489]*v[517];
      v[499]=v[350]*v[492]+v[342]*v[497]+v[489]*v[518];
      v[989]=v[498]+v[499];
      v[500]=v[348]*v[493]+v[344]*v[497]+v[490]*v[513];
      v[501]=v[349]*v[493]+v[345]*v[497]+v[490]*v[514];
      v[502]=v[350]*v[493]+v[346]*v[497]+v[490]*v[515];
      v[987]=v[501]+v[502];
      v[1684]=v[281]*(v[500]+v[189]*v[503]);
      v[1685]=v[281]*(v[496]+v[189]*v[504]);
      v[1686]=v[281]*(v[491]+v[189]*v[505]);
      v[1687]=v[282]*(v[501]+v[189]*v[506]);
      v[1688]=v[282]*(v[498]+v[189]*v[507]);
      v[1689]=v[282]*(v[494]+v[189]*v[508]);
      v[1690]=v[283]*(v[502]+v[189]*v[509]);
      v[1691]=v[283]*(v[499]+v[189]*v[510]);
      v[1692]=v[283]*(v[495]+v[189]*v[511]);
      v[1693]=v[1013]*v[512]+v[284]*(v[500]+v[987]);
      v[1694]=v[1014]*v[512]+v[284]*(v[496]+v[989]);
      v[1695]=v[1015]*v[512]+v[284]*(v[491]+v[990]);
      v[1696]=v[285]*v[500]+v[286]*v[501]+v[1016]*v[986];
      v[1697]=v[285]*v[496]+v[286]*v[498]+v[1017]*v[986];
      v[1698]=v[285]*v[491]+v[286]*v[494]+v[1018]*v[986];
      v[1699]=v[287]*v[501]+v[285]*v[502]+v[1019]*v[986];
      v[1700]=v[287]*v[498]+v[285]*v[499]+v[1020]*v[986];
      v[1701]=v[287]*v[494]+v[285]*v[495]+v[1021]*v[986];
      v[1702]=v[287]*v[500]+v[286]*v[502]+v[1022]*v[986];
      v[1703]=v[287]*v[496]+v[286]*v[499]+v[1023]*v[986];
      v[1704]=v[287]*v[491]+v[286]*v[495]+v[1024]*v[986];
      v[1705]=v[289]*v[500]-v[286]*v[987]+v[189]*(v[289]*v[503]+v[1025]*v[988]);
      v[1706]=v[289]*v[496]+v[189]*(v[289]*v[504]+v[1026]*v[988])-v[286]*v[989];
      v[1707]=v[289]*v[491]+v[189]*(v[289]*v[505]+v[1027]*v[988])-v[286]*v[990];
      v[1708]=v[290]*v[501]-v[285]*(v[500]+v[502])+v[189]*(v[290]*v[506]+v[1028]*v[991]);
      v[1709]=v[290]*v[498]-v[285]*(v[496]+v[499])+v[189]*(v[290]*v[507]+v[1029]*v[991]);
      v[1710]=v[290]*v[494]-v[285]*(v[491]+v[495])+v[189]*(v[290]*v[508]+v[1030]*v[991]);
      v[1711]=-(v[287]*(v[500]+v[501]))+v[291]*v[502]+v[189]*(v[291]*v[509]+v[983]*v[992]);
      v[1712]=-(v[287]*(v[496]+v[498]))+v[291]*v[499]+v[189]*(v[291]*v[510]+v[984]*v[992]);
      v[1713]=-(v[287]*(v[491]+v[494]))+v[291]*v[495]+v[189]*(v[291]*v[511]+v[985]*v[992]);
      v[1714]=v[481]-v[255]*v[485];
      v[1715]=v[482]-v[257]*v[485];
      v[1716]=v[483]-v[258]*v[485];
      v[1717]=-v[481]-v[482]-v[483]-v[263]*v[485];
      p[i438-1]+=v[1101+i438]*v[314];
      for(i455=1;i455<=34;i455++){
       s[i438-1][i455-1]+=v[1683+i455]*v[314];
      };/* end for */
     };/* end for */
    };/* end for */
    };

    /******************* S U B R O U T I N E *********************/
    void SPP(double v[1817],ElementSpec *es,ElementData *ed,NodeSpec **ns
         ,NodeData **nd,double *rdata,int *idata,double **gpost,double **npost)
    {
    int i777,i779;
    v[524]=nd[0]->X[0];
    v[525]=nd[0]->X[1];
    v[526]=nd[0]->X[2];
    v[527]=nd[1]->X[0];
    v[528]=nd[1]->X[1];
    v[529]=nd[1]->X[2];
    v[530]=nd[2]->X[0];
    v[531]=nd[2]->X[1];
    v[532]=nd[2]->X[2];
    v[533]=nd[3]->X[0];
    v[534]=nd[3]->X[1];
    v[535]=nd[3]->X[2];
    v[536]=nd[4]->X[0];
    v[537]=nd[4]->X[1];
    v[538]=nd[4]->X[2];
    v[539]=nd[5]->X[0];
    v[540]=nd[5]->X[1];
    v[541]=nd[5]->X[2];
    v[542]=nd[6]->X[0];
    v[543]=nd[6]->X[1];
    v[544]=nd[6]->X[2];
    v[545]=nd[7]->X[0];
    v[546]=nd[7]->X[1];
    v[547]=nd[7]->X[2];
    v[548]=nd[8]->X[0];
    v[549]=nd[8]->X[1];
    v[550]=nd[8]->X[2];
    v[551]=nd[9]->X[0];
    v[552]=nd[9]->X[1];
    v[553]=nd[9]->X[2];
    v[566]=nd[0]->at[0];
    v[567]=nd[0]->at[1];
    v[568]=nd[0]->at[2];
    v[569]=nd[1]->at[0];
    v[570]=nd[1]->at[1];
    v[571]=nd[1]->at[2];
    v[572]=nd[2]->at[0];
    v[573]=nd[2]->at[1];
    v[574]=nd[2]->at[2];
    v[575]=nd[3]->at[0];
    v[576]=nd[3]->at[1];
    v[577]=nd[3]->at[2];
    v[578]=nd[4]->at[0];
    v[579]=nd[4]->at[1];
    v[580]=nd[4]->at[2];
    v[581]=nd[5]->at[0];
    v[582]=nd[5]->at[1];
    v[583]=nd[5]->at[2];
    v[584]=nd[6]->at[0];
    v[585]=nd[6]->at[1];
    v[586]=nd[6]->at[2];
    v[587]=nd[7]->at[0];
    v[588]=nd[7]->at[1];
    v[589]=nd[7]->at[2];
    v[590]=nd[8]->at[0];
    v[591]=nd[8]->at[1];
    v[592]=nd[8]->at[2];
    v[593]=nd[9]->at[0];
    v[594]=nd[9]->at[1];
    v[595]=nd[9]->at[2];
    v[596]=nd[10]->at[0];
    v[597]=nd[11]->at[0];
    v[598]=nd[12]->at[0];
    v[599]=nd[13]->at[0];
    v[911]=v[598]-v[599];
    v[910]=v[597]-v[599];
    v[909]=v[596]-v[599];
    v[635]=es->Data[1];
    v[1031]=es->Data[0]/(1e0+v[635]);
    v[636]=(v[1031]*v[635])/(1e0-2e0*v[635]);
    v[638]=v[1031]/2e0;
    v[642]=es->Data[5];
    v[643]=es->Data[6];
    for(i777=1;i777<=es->id.NoIntPoints;i777++){
     i779=4*(-1+i777);
     v[778]=es->IntPoints[i779];
     v[809]=4e0*v[778];
     v[804]=-1e0+v[809];
     v[780]=es->IntPoints[1+i779];
     v[808]=4e0*v[780];
     v[856]=-(v[592]*v[808]);
     v[849]=-(v[591]*v[808]);
     v[842]=-(v[590]*v[808]);
     v[833]=-(v[550]*v[808]);
     v[826]=-(v[549]*v[808]);
     v[819]=-(v[548]*v[808]);
     v[805]=-1e0+v[808];
     v[781]=es->IntPoints[2+i779];
     v[810]=4e0*v[781];
     v[854]=-(v[595]*v[810]);
     v[847]=-(v[594]*v[810]);
     v[840]=-(v[593]*v[810]);
     v[831]=-(v[553]*v[810]);
     v[824]=-(v[552]*v[810]);
     v[817]=-(v[551]*v[810]);
     v[806]=-1e0+v[810];
     v[783]=v[778]*(-1e0+2e0*v[778]);
     v[784]=v[780]*(-1e0+2e0*v[780]);
     v[785]=v[781]*(-1e0+2e0*v[781]);
     v[786]=1e0-v[778]-v[780]-v[781];
     v[811]=-4e0*v[786];
     v[814]=-v[810]-v[811];
     v[813]=-v[808]-v[811];
     v[812]=-v[809]-v[811];
     v[807]=1e0+v[811];
     v[853]=v[577]*v[807];
     v[1032]=-(v[589]*v[809])+v[853];
     v[858]=v[1032]+v[574]*v[806]+v[583]*v[808]+v[586]*v[809]+v[595]*v[814]+v[856];
     v[855]=v[1032]+v[571]*v[805]+v[580]*v[809]+v[583]*v[810]+v[592]*v[813]+v[854];
     v[852]=v[568]*v[804]+v[580]*v[808]+v[586]*v[810]+v[589]*v[812]+v[853]+v[854]+v[856];
     v[846]=v[576]*v[807];
     v[1033]=-(v[588]*v[809])+v[846];
     v[851]=v[1033]+v[573]*v[806]+v[582]*v[808]+v[585]*v[809]+v[594]*v[814]+v[849];
     v[848]=v[1033]+v[570]*v[805]+v[579]*v[809]+v[582]*v[810]+v[591]*v[813]+v[847];
     v[845]=v[567]*v[804]+v[579]*v[808]+v[585]*v[810]+v[588]*v[812]+v[846]+v[847]+v[849];
     v[839]=v[575]*v[807];
     v[1034]=-(v[587]*v[809])+v[839];
     v[844]=v[1034]+v[572]*v[806]+v[581]*v[808]+v[584]*v[809]+v[593]*v[814]+v[842];
     v[841]=v[1034]+v[569]*v[805]+v[578]*v[809]+v[581]*v[810]+v[590]*v[813]+v[840];
     v[838]=v[566]*v[804]+v[578]*v[808]+v[584]*v[810]+v[587]*v[812]+v[839]+v[840]+v[842];
     v[830]=v[535]*v[807];
     v[1035]=-(v[547]*v[809])+v[830];
     v[835]=v[1035]+v[532]*v[806]+v[541]*v[808]+v[544]*v[809]+v[553]*v[814]+v[833];
     v[832]=v[1035]+v[529]*v[805]+v[538]*v[809]+v[541]*v[810]+v[550]*v[813]+v[831];
     v[829]=v[526]*v[804]+v[538]*v[808]+v[544]*v[810]+v[547]*v[812]+v[830]+v[831]+v[833];
     v[823]=v[534]*v[807];
     v[1036]=-(v[546]*v[809])+v[823];
     v[828]=v[1036]+v[531]*v[806]+v[540]*v[808]+v[543]*v[809]+v[552]*v[814]+v[826];
     v[825]=v[1036]+v[528]*v[805]+v[537]*v[809]+v[540]*v[810]+v[549]*v[813]+v[824];
     v[863]=-(v[828]*v[832])+v[825]*v[835];
     v[822]=v[525]*v[804]+v[537]*v[808]+v[543]*v[810]+v[546]*v[812]+v[823]+v[824]+v[826];
     v[865]=-(v[825]*v[829])+v[822]*v[832];
     v[864]=v[828]*v[829]-v[822]*v[835];
     v[816]=v[533]*v[807];
     v[1037]=-(v[545]*v[809])+v[816];
     v[821]=v[1037]+v[530]*v[806]+v[539]*v[808]+v[542]*v[809]+v[551]*v[814]+v[819];
     v[818]=v[1037]+v[527]*v[805]+v[536]*v[809]+v[539]*v[810]+v[548]*v[813]+v[817];
     v[871]=-(v[821]*v[825])+v[818]*v[828];
     v[867]=v[821]*v[832]-v[818]*v[835];
     v[815]=v[524]*v[804]+v[536]*v[808]+v[542]*v[810]+v[545]*v[812]+v[816]+v[817]+v[819];
     v[873]=-(v[818]*v[822])+v[815]*v[825];
     v[872]=v[821]*v[822]-v[815]*v[828];
     v[869]=v[818]*v[829]-v[815]*v[832];
     v[868]=-(v[821]*v[829])+v[815]*v[835];
     v[859]=v[815]*v[863]+v[818]*v[864]+v[821]*v[865];
     v[1048]=v[873]/v[859];
     v[1047]=v[872]/v[859];
     v[1046]=v[871]/v[859];
     v[1045]=v[869]/v[859];
     v[1044]=v[868]/v[859];
     v[1043]=v[867]/v[859];
     v[1042]=v[865]/v[859];
     v[1041]=v[864]/v[859];
     v[1040]=v[863]/v[859];
     v[787]=v[786]*(-1e0+2e0*v[786]);
     v[788]=4e0*v[778]*v[780];
     v[789]=4e0*v[780]*v[781];
     v[790]=4e0*v[778]*v[781];
     v[791]=4e0*v[778]*v[786];
     v[792]=4e0*v[780]*v[786];
     v[793]=4e0*v[781]*v[786];
     v[803]=v[596]*v[778]+v[597]*v[780]+v[598]*v[781]+v[599]*v[786];
     v[916]=(v[838]*v[863]+v[841]*v[864]+v[844]*v[865])/v[859];
     v[919]=(v[845]*v[867]+v[848]*v[868]+v[851]*v[869])/v[859];
     v[921]=(v[852]*v[871]+v[855]*v[872]+v[858]*v[873])/v[859];
     v[1038]=v[916]+v[919]+v[921];
     v[1039]=v[1038]*v[636]-v[803];
     v[1049]=-(v[643]/(1e0+(-1e0+v[1038])*v[642]));
     gpost[i777-1][0]=v[803];
     gpost[i777-1][1]=v[566]*v[783]+v[569]*v[784]+v[572]*v[785]+v[575]*v[787]+v[578]*v[788]
      +v[581]*v[789]+v[584]*v[790]+v[587]*v[791]+v[590]*v[792]+v[593]*v[793];
     gpost[i777-1][2]=v[567]*v[783]+v[570]*v[784]+v[573]*v[785]+v[576]*v[787]+v[579]*v[788]
      +v[582]*v[789]+v[585]*v[790]+v[588]*v[791]+v[591]*v[792]+v[594]*v[793];
     gpost[i777-1][3]=v[568]*v[783]+v[571]*v[784]+v[574]*v[785]+v[577]*v[787]+v[580]*v[788]
      +v[583]*v[789]+v[586]*v[790]+v[589]*v[791]+v[592]*v[792]+v[595]*v[793];
     gpost[i777-1][4]=v[1039]+v[1031]*v[916];
     gpost[i777-1][5]=v[1039]+2e0*v[638]*v[919];
     gpost[i777-1][6]=v[1039]+v[1031]*v[921];
     gpost[i777-1][7]=v[638]*(v[1043]*v[838]+v[1044]*v[841]+v[1045]*v[844]+v[1040]*v[845]
      +v[1041]*v[848]+v[1042]*v[851]);
     gpost[i777-1][8]=v[638]*(v[1046]*v[845]+v[1047]*v[848]+v[1048]*v[851]+v[1043]*v[852]
      +v[1044]*v[855]+v[1045]*v[858]);
     gpost[i777-1][9]=v[638]*(v[1046]*v[838]+v[1047]*v[841]+v[1048]*v[844]+v[1040]*v[852]
      +v[1041]*v[855]+v[1042]*v[858]);
     gpost[i777-1][10]=v[1049]*(v[1040]*v[909]+v[1041]*v[910]+v[1042]*v[911]);
     gpost[i777-1][11]=v[1049]*(v[1043]*v[909]+v[1044]*v[910]+v[1045]*v[911]);
     gpost[i777-1][12]=v[1049]*(v[1046]*v[909]+v[1047]*v[910]+v[1048]*v[911]);
    };/* end for */
};

// End of AceGen code which was inside FE_def.hpp

// So this function was inside our AssembleFE_NavierStokes_def.hpp but we do not need it because we already have an if 
// statement inside our getJacobian function which includes the extra gateaux-derivative term if we have selected Newton
// as ansatz
/************************************/

template <class SC, class LO, class GO, class NO>
void AssembleFENavierStokes<SC,LO,GO,NO>::assembleFixedPoint() {

	SmallMatrixPtr_Type elementMatrixN =Teuchos::rcp( new SmallMatrix_Type( dofsElementVelocity_+numNodesPressure_));

	if(this->newtonStep_ ==0){
		SmallMatrixPtr_Type elementMatrixA =Teuchos::rcp( new SmallMatrix_Type( dofsElementVelocity_+numNodesPressure_));
		SmallMatrixPtr_Type elementMatrixB =Teuchos::rcp( new SmallMatrix_Type( dofsElementVelocity_+numNodesPressure_));

		constantMatrix_.reset(new SmallMatrix_Type( dofsElementVelocity_+numNodesPressure_));

		assemblyLaplacian(elementMatrixA);

		elementMatrixA->scale(viscosity_);
		elementMatrixA->scale(density_);

		constantMatrix_->add( (*elementMatrixA),(*constantMatrix_));

		assemblyDivAndDivT(elementMatrixB); // For Matrix B

		elementMatrixB->scale(-1.);

		constantMatrix_->add( (*elementMatrixB),(*constantMatrix_));
    }

	ANB_.reset(new SmallMatrix_Type( dofsElementVelocity_+numNodesPressure_)); // A + B + N
	ANB_->add( (*constantMatrix_),(*ANB_));

	assemblyAdvection(elementMatrixN);
	elementMatrixN->scale(density_);
	ANB_->add( (*elementMatrixN),(*ANB_));

}